<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vladimir Makushev. Blog.</title>
  
  <subtitle>Frontend Engineer.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://makushev.com/"/>
  <updated>2020-11-21T18:51:27.007Z</updated>
  <id>http://makushev.com/</id>
  
  <author>
    <name>Vladimir Makushev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Скороговорка &quot;Лигурия&quot;</title>
    <link href="http://makushev.com/2020/11/20/diction-improvement/"/>
    <id>http://makushev.com/2020/11/20/diction-improvement/</id>
    <published>2020-11-21T06:15:17.000Z</published>
    <updated>2020-11-21T18:51:27.007Z</updated>
    
    <content type="html"><![CDATA[<p>Для улучшения дикции можно использовать известную скороговорку “Лигурия”. Мне доводилось видеть как профессиональные теледикторы и спикеры используют её для “настройки” своего речевого аппарата. </p><p>Я разбил эту скороговорку на относительно равномерные блоки, с которыми удобно работать, если вы чередуете разные техники: </p><ul><li>карандаш зажатый зубами; </li><li>чревовещание (закрытый рот);</li><li>сомкнутые зубы и статичные губы;</li><li>активная артикуляция.</li></ul><p>Важно делать акцент не на скорости, а на четкости произношения.</p><p>Понятно и с примерами было представлено в ролике канала Petrova Channel <a href="https://www.youtube.com/watch?v=qjD6Tt5b6Jg" target="_blank" rel="noopener">Как улучшить дикцию</a>.</p><a id="more"></a><h1 id="Скороговорка-“Лигурия”"><a href="#Скороговорка-“Лигурия”" class="headerlink" title="Скороговорка “Лигурия”"></a>Скороговорка “Лигурия”</h1><p>В четверг четвертого числа в четыре с четвертью часа лигурийский регулировщик регулировал в Лигурии, но тридцать три корабля лавировали, лавировали, да так и не вылавировали, а потом протокол про протокол протоколом запротоколировал. </p><p>Как интервьюером интервьюируемый лигурийский регулировщик речисто, да не чисто рапортовал, да не дорапортовал - дорапортовывал. Да так зарапортовался про размокропогодившуюся погоду, что дабы инцидент не стал претендентом на судебный прецедент, лигурийский регулировщик акклиматизировался в неконституционном Константинополе.</p><p>Где хохлатые хохотушки хохотом хохотали и кричали турке, который начерно обкурен трубкой: не кури, турка, трубку, купи лучше кипу пик, лучше пик кипу купи, а то придет бомбардир из Брандебурга, бомбами забомбардирует за то, что некто чернорылый у него полдвора рылом изрыл, вырыл и подрыл. Но на самом деле турка не был в деле. </p><p>Да и Клара-краля в то время кралась к ларю, пока Карл у Клары кораллы крал, за что Клара у Карла украла кларнет. А потом на дворе деготниковой вдовы Варвары два этих вора дрова воровали. Но грех — не смех, не уложить в орех: о Кларе с Карлом во мраке все раки шумели в драке. </p><p>Вот и не до бомбардира ворам было, но и не до деготниковой вдовы, и не до деготниковых детей. Зато рассердившаяся вдова убрала в сарай дрова: раз дрова, два дрова, три дрова — не вместились все дрова, и два дровосека, два дровокола-дроворуба для расчувствовавшейся Варвары выдворили дрова вширь двора обратно на дровяной двор, где цапля чахла, цапля сохла, цапля сдохла. </p><p>Цыпленок же цапли цепко цеплялся за цепь. Молодец против овец, а против молодца — сама овца, которой носит Сеня сено в сани, потом везет Сенька Соньку с Санькой на санках: санки — скок, Сеньку — в бок, Соньку — в лоб, все — в сугроб.</p><p>А Сашка только шапкой шишки сшиб. Затем по шоссе Саша пошел, саше на шоссе Саша нашел; Сонька же — Сашкина подружка — шла по шоссе и сосала сушку. Да притом у Соньки-вертушки во рту еще три ватрушки — аккурат медовик. Но ей не до медовика — Сонька с ватрушками во рту пономаря перепономарит-перевыпономари. </p><p>Жужжит, как жужелица, жужжит, да кружится: была у Фрола — Фролу на Лавра наврала, пойдет к Лавру на Фрола Лавру наврет, что вахмистр с вахмистршей, ротмистр с ротмистршей, что у ужа — ужата, у ежа — ежата, а у него высокопоставленный гость унес трость, и вскоре опять пять ребят съели пять опят с полчетвертью четверика чечевицы без червоточины, да тысячу шестьсот шестьдесят шесть пирогов с творогом из сыворотки из-под простокваши. </p><p>О всём о том колокола-колокола звоном раззванивали, да так, что даже Константин Зальцбургский бесперспективняк из-под бронетранспортёра константировал. Как все колокола не переколоколовать, не перевыколоколовать, так и всех скороговорок не перескороговорить, не перевыскороговорить. Но попытка — не пытка.</p><h2 id="Бонус"><a href="#Бонус" class="headerlink" title="Бонус"></a>Бонус</h2><p>Дело было вечером, делать было нечего. Расчувствовавшаяся вавилонка Варвара расчувствовала нерасчувствовавшегося Вавилу, а развеселившиеся миссис и мистер Уксусы развеселили неразвеселившегося суслика. Но миссис и мистер Уксусы не знали, что расчувствовавшаяся вавилонка Варвара расчувствовала нерасчувствовавшегося вавилонца Вавилу. </p><p>Но когда они встретились, то рассказали это друг другу. Но вдруг пришел Прокоп кипятить свой укроп. А портной Пото и портниха Пото стали играть в лото. Дело было вечером, делать было нечего.</p><p>Шла Саша по шоссе. Навстречу ей шел шофер по шоссе, тащил шину для машины. Шофер испачкался, стал черным, как чертенок. Саша шофера увидала, обомлела, слова сказать не может, только: тит! тэт! тат! тот! тут! тыт! А потом, когда узнала его, все ему рассказала. </p><p>Рассказала, что на дворе трава, на траве дрова, что бомбардир бомбардировал Бранденбург, что всех скороговорок не перескороговоришь, не перевыскороговоришь. Саша болтала, болтала, да так и не выболтала, а шофер сел, онемел и заснул.</p><p>Языком не расскажешь, так и пальцем не растычешь. Нечего руками рассуждать, коли Бог ума не дал. Речь умом красна, а если язык шепеляв, то и поговори скороговорочку за скороговорочкой: тридцать три корабля лавировали, лавировали, да невылавировали; у нас на дворе-подворье погода размокропогодилась; сшит колпак не по-колпаковски, вылит колокол не по-колоколовски, надо колпак переколпаковать, перевыколпаковать, надо колокол переколоколовать, перевыколоколовать, надо все скороговорки перескороговорить, перевыскороговорить, и тогда так заговоришь, словно реченька зажурчишь.</p><p>От топота копыт пыль по полю летит. То послали Сеню с донесеньем. Голова у Сени с лукошко, а ума ни крошки. Доскакать доскакал, да все не так рассказал: рассказал, что не тридцать три корабля лавировали, лавировали, да не вылавировали, что Прокоп не варил свой укроп, а съел у Малаши всю сыворотку из-под простокваши да еще пирог с грибами, чтоб держать язык за зубами. Прокоп-то держал, а Сеня все болтал да болтал, да и вздремнул. Вздремнуть не вздремнул, всхрапнул, да и присвистнул.</p><p>Командир говорил про полковника, про полковницу, про подполковника, про подполковницу, про подпрапорщика, а про подпрапорщицу промолчал, а говорил, что у гусыни усов ищи не ищи — не сыщешь, что чешуя у щучки, щетинка у чушки, что около кола — колокола, что у осы не усы, не усищи, а усики.</p><p>Береги честь смолоду, а то была у Фрола — Фролу на Лавра наврала, пойдет к Лавру — на Фрола Лавру наврет, ведь язык без костей и без того красный. У злой Натальи все люди канальи, а еще говорит: «Не тот, товарищи, товарищу товарищ, кто при товарищах товарищу товарищ, а тот, товарищи, товарищу товарищ, кто без товарищей; товарищу товарищ».</p><p>Я ему по секрету, а он по всему свету, что на улице медовик, мне не до медовика, что на улице деготник, мне не до деготника, не до деготниковой жены, не до деготниковых детей. Так вот скажет друг дружке, а дружка подружке, а подружка борову, а боров всему городу — язык от лжи не краснеет, и без того красный, а только береги честь смолоду: один раз соврешь — в другой не поверят; ведь коли врун, так и обманщик, а обманщик, так и плут, а плут, так и мошенник, а мошенник, так и вор.</p><p>Раз щёголь Щегол ящик щебня нашел,<br>а в щели шуршали щучата,<br>щербатая щука тащила чехол,<br>чтоб сшить из него им брючата. </p><p>Щегол шустро щеку ей вдруг прищемил<br>щипцами и шмякнул шумовкой,<br>не мешкая, этот мешок потащил,<br>но вдруг зашуршала шнуровка.</p><p>И вышла, щебеча и щурясь, шпана<br>щенки, но в шершавой щетине<br>и быстро шугнули Щегла-шалуна,<br>чтоб больше не шастал в лощине. </p><p>От шока щегол наш утратил свой шарм,<br>чесалась под перьями шкурка.<br>Теперь сторожит он ворота казарм,<br>в матросской шикуя тужурке.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Для улучшения дикции можно использовать известную скороговорку “Лигурия”. Мне доводилось видеть как профессиональные теледикторы и спикеры используют её для “настройки” своего речевого аппарата. &lt;/p&gt;
&lt;p&gt;Я разбил эту скороговорку на относительно равномерные блоки, с которыми удобно работать, если вы чередуете разные техники: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;карандаш зажатый зубами; &lt;/li&gt;
&lt;li&gt;чревовещание (закрытый рот);&lt;/li&gt;
&lt;li&gt;сомкнутые зубы и статичные губы;&lt;/li&gt;
&lt;li&gt;активная артикуляция.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Важно делать акцент не на скорости, а на четкости произношения.&lt;/p&gt;
&lt;p&gt;Понятно и с примерами было представлено в ролике канала Petrova Channel &lt;a href=&quot;https://www.youtube.com/watch?v=qjD6Tt5b6Jg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Как улучшить дикцию&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="саморазвитие" scheme="http://makushev.com/tags/%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5/"/>
    
      <category term="дикция" scheme="http://makushev.com/tags/%D0%B4%D0%B8%D0%BA%D1%86%D0%B8%D1%8F/"/>
    
      <category term="скороговорка" scheme="http://makushev.com/tags/%D1%81%D0%BA%D0%BE%D1%80%D0%BE%D0%B3%D0%BE%D0%B2%D0%BE%D1%80%D0%BA%D0%B0/"/>
    
  </entry>
  
  <entry>
    <title>TransferWise referral link</title>
    <link href="http://makushev.com/2020/11/20/transferwise-referral-link-eng/"/>
    <id>http://makushev.com/2020/11/20/transferwise-referral-link-eng/</id>
    <published>2020-11-21T05:53:06.000Z</published>
    <updated>2020-11-21T18:23:36.443Z</updated>
    
    <content type="html"><![CDATA[<p>If you’d like to transfer money internationally, you can use my <a href="https://transferwise.com/invite/u/vladimirm594" target="_blank" rel="noopener">TransferWise referral link</a>. It gives you commission-free transfers up to the first $600/500GBP (at the time I’m writing it).</p><p>There are card-to-card (Visa, MasterCard), bank account and <em>Transfer Wire</em> transfers available.</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’d like to transfer money internationally, you can use my &lt;a href=&quot;https://transferwise.com/invite/u/vladimirm594&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TransferWise referral link&lt;/a&gt;. It gives you commission-free transfers up to the first $600/500GBP (at the time I’m writing it).&lt;/p&gt;
&lt;p&gt;There are card-to-card (Visa, MasterCard), bank account and &lt;em&gt;Transfer Wire&lt;/em&gt; transfers available.&lt;/p&gt;
    
    </summary>
    
    
      <category term="English" scheme="http://makushev.com/categories/English/"/>
    
    
      <category term="referral" scheme="http://makushev.com/tags/referral/"/>
    
      <category term="link" scheme="http://makushev.com/tags/link/"/>
    
      <category term="transferwise" scheme="http://makushev.com/tags/transferwise/"/>
    
  </entry>
  
  <entry>
    <title>Реферальна ссылка на TransferWise</title>
    <link href="http://makushev.com/2020/11/20/transferwise-referral-link/"/>
    <id>http://makushev.com/2020/11/20/transferwise-referral-link/</id>
    <published>2020-11-21T05:51:06.000Z</published>
    <updated>2020-11-21T18:14:38.541Z</updated>
    
    <content type="html"><![CDATA[<p>Если вы ищете доступный способ перевода денег между странами и хотите сделать это без комиссии, то вот вам моя <a href="https://transferwise.com/invite/u/vladimirm594" target="_blank" rel="noopener">реферальная ссылка на TransferWise</a>. При регистрации по ней, вы сможете отправить первые $600/500GBP (на момент написания статьи) без комиссии.</p><p>Можно переводить с карты на карту (Visa, MasterCard); можно с банковского счета или через <em>Transfer Wire</em>.</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Если вы ищете доступный способ перевода денег между странами и хотите сделать это без комиссии, то вот вам моя &lt;a href=&quot;https://transferwise.com/invite/u/vladimirm594&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;реферальная ссылка на TransferWise&lt;/a&gt;. При регистрации по ней, вы сможете отправить первые $600/500GBP (на момент написания статьи) без комиссии.&lt;/p&gt;
&lt;p&gt;Можно переводить с карты на карту (Visa, MasterCard); можно с банковского счета или через &lt;em&gt;Transfer Wire&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="referral" scheme="http://makushev.com/tags/referral/"/>
    
      <category term="link" scheme="http://makushev.com/tags/link/"/>
    
      <category term="transferwise" scheme="http://makushev.com/tags/transferwise/"/>
    
  </entry>
  
  <entry>
    <title>Outrun Timer App</title>
    <link href="http://makushev.com/2020/07/03/outrun-timer-pwa/"/>
    <id>http://makushev.com/2020/07/03/outrun-timer-pwa/</id>
    <published>2020-07-03T15:13:14.000Z</published>
    <updated>2020-07-04T03:16:44.510Z</updated>
    
    <content type="html"><![CDATA[<p>I understand there are so many beautiful timers across the WEB tailored for plenty of specific needs.</p><p>One of the reasons why I like my profession is that I can create everything I want in the way I want it to look and behave.</p><p>So let me introduce to you my <a href="https://timer.makushev.com/" target="_blank" rel="noopener">Outrun Timer</a> app:</p><ul><li>it works both online and offline</li><li>adapts to device screen size (phone, tablet, desktop)</li><li>might be added to your home screen as a standalone App. </li></ul><p>Read more about my motivation, technical details and insights.</p><a id="more"></a><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>To be honest, the main idea of ​​creating this timer was to play around technologies which are out of my daily routine, but interesting for me.</p><p>So I set up the next goals for myself:</p><ul><li>Write SPA with Vue.js ecosystem (Vue router, Vuex)</li><li>Turn it into Progressive Web Application</li><li>Use AudioContext API</li><li>Make it works offline</li><li>Get as much Lighthouse rating as possible for both Mobile/Desktop devices</li><li>Get new experience </li><li>Have fun</li></ul><h2 id="Insights"><a href="#Insights" class="headerlink" title="Insights"></a>Insights</h2><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><p>In general, I liked Vue and its simplicity. It’s really impressive how easy you can start using it without any previous experience. I believe it ideally fits for the prototyping of complex SPA-interfaces.</p><h3 id="AudioContext-API"><a href="#AudioContext-API" class="headerlink" title="AudioContext API"></a>AudioContext API</h3><p>At first, I’ve chosen an old-fashioned HTMLAudio. Later, I figured out it stops other sounds, e.g. if you’re listening to the music while the timer is working. It was the main reason I’ve eventually switched to the AudioContext API.</p><p>Another interesting point for me was the inability to play sound until the user starts interacting with your app. It definitely makes sense for me, since I still remember the end of the 90s when you could open the web-page and be stunned by web-page author’s musical preferences :)</p><h3 id="Progressive-Web-Application"><a href="#Progressive-Web-Application" class="headerlink" title="Progressive Web Application"></a>Progressive Web Application</h3><p>I used a <strong>workbox-webpack-plugin</strong> which did almost everything for me to transform SPA to PWA. For the sake of simplicity, it’s definitely worth using. One of the negative things about PWA was debugging and caching. Sometimes after changes in the code browser were still showing the previous result, sometimes it wasn’t. Removing PWA-plugin from dev-versions helped.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I understand there are so many beautiful timers across the WEB tailored for plenty of specific needs.&lt;/p&gt;
&lt;p&gt;One of the reasons why I like my profession is that I can create everything I want in the way I want it to look and behave.&lt;/p&gt;
&lt;p&gt;So let me introduce to you my &lt;a href=&quot;https://timer.makushev.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Outrun Timer&lt;/a&gt; app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it works both online and offline&lt;/li&gt;
&lt;li&gt;adapts to device screen size (phone, tablet, desktop)&lt;/li&gt;
&lt;li&gt;might be added to your home screen as a standalone App. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more about my motivation, technical details and insights.&lt;/p&gt;
    
    </summary>
    
    
      <category term="English" scheme="http://makushev.com/categories/English/"/>
    
    
      <category term="interval timer" scheme="http://makushev.com/tags/interval-timer/"/>
    
      <category term="outrun style" scheme="http://makushev.com/tags/outrun-style/"/>
    
      <category term="PWA" scheme="http://makushev.com/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>I&#39;m back!</title>
    <link href="http://makushev.com/2018/10/17/im-back/"/>
    <id>http://makushev.com/2018/10/17/im-back/</id>
    <published>2018-10-17T15:31:42.000Z</published>
    <updated>2018-10-18T01:43:32.876Z</updated>
    
    <content type="html"><![CDATA[<p>Hi everyone. I’ve finally back. I had some issues regarding recovering of this blog and I decided to move this blog to my <a href="//makushev.com">general domain</a> and removed all out-of-date stuff. So, let’s proceed. I’ve got a lot to write about :) Stay tuned.</p><p>P.S. Actually, this is just a test for checking that everything is still working :)<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi everyone. I’ve finally back. I had some issues regarding recovering of this blog and I decided to move this blog to my &lt;a href=&quot;//makushev.com&quot;&gt;general domain&lt;/a&gt; and removed all out-of-date stuff. So, let’s proceed. I’ve got a lot to write about :) Stay tuned.&lt;/p&gt;
&lt;p&gt;P.S. Actually, this is just a test for checking that everything is still working :)&lt;br&gt;
    
    </summary>
    
    
      <category term="English" scheme="http://makushev.com/categories/English/"/>
    
    
      <category term="personal, news" scheme="http://makushev.com/tags/personal-news/"/>
    
  </entry>
  
  <entry>
    <title>Digitalocean referral link</title>
    <link href="http://makushev.com/2016/01/05/digitalocean-referral-link-eng/"/>
    <id>http://makushev.com/2016/01/05/digitalocean-referral-link-eng/</id>
    <published>2016-01-05T10:00:53.000Z</published>
    <updated>2018-03-20T03:51:34.994Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to get $10 to your Digitalocean account, please use my referral link: <a href="http://www.digitalocean.com/?refcode=5f75c3f0a286" target="_blank" rel="noopener">Digitalocean referral link</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to get $10 to your Digitalocean account, please use my referral link: &lt;a href=&quot;http://www.digitalocean.com/?refcode=5f75c3f0a286&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Digitalocean referral link&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="English" scheme="http://makushev.com/categories/English/"/>
    
    
      <category term="digitalocean" scheme="http://makushev.com/tags/digitalocean/"/>
    
      <category term="referral" scheme="http://makushev.com/tags/referral/"/>
    
      <category term="link" scheme="http://makushev.com/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>Реферальная ссылка на Digitalocean</title>
    <link href="http://makushev.com/2016/01/05/digitalocean-referral-link/"/>
    <id>http://makushev.com/2016/01/05/digitalocean-referral-link/</id>
    <published>2016-01-05T10:00:53.000Z</published>
    <updated>2018-03-20T03:51:34.995Z</updated>
    
    <content type="html"><![CDATA[<p>Если вдруг кому-то нужны $10 на Digitalocean, то можете смело использовать мою реферальную ссылку: <a href="http://www.digitalocean.com/?refcode=5f75c3f0a286" target="_blank" rel="noopener">Digitalocean referral link</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Если вдруг кому-то нужны $10 на Digitalocean, то можете смело использовать мою реферальную ссылку: &lt;a href=&quot;http://www.digitalocean.com/?refcode=5f75c3f0a286&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Digitalocean referral link&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="digitalocean" scheme="http://makushev.com/tags/digitalocean/"/>
    
      <category term="referral" scheme="http://makushev.com/tags/referral/"/>
    
      <category term="link" scheme="http://makushev.com/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>Стрелочные функции</title>
    <link href="http://makushev.com/2015/12/29/es6-arrow-functions/"/>
    <id>http://makushev.com/2015/12/29/es6-arrow-functions/</id>
    <published>2015-12-29T15:15:28.000Z</published>
    <updated>2018-03-20T03:51:34.996Z</updated>
    
    <content type="html"><![CDATA[<p>Лично я со стрелочными функциями познакомился лет так наверное 5-7 назад, когда был программистом ASP.NET и писал на C#. Затем, я решил полностью погрузиться в javascript, но стрелочные функции, скорее к счастью, пришли и сюда. Я люблю стрелочные функции и уверен вы их полюбите тоже.<br><a id="more"></a></p><h2 id="Синтаксис"><a href="#Синтаксис" class="headerlink" title="Синтаксис"></a>Синтаксис</h2><p>Начнем сразу же с примера:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="params">x</span>=&gt;</span>x*<span class="number">2</span>);</span><br><span class="line"><span class="comment">//[2,4,6,8]</span></span><br></pre></td></tr></table></figure></p><p>А вот как этот же пример выглядел бы в ES5:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x*<span class="number">2</span>; &#125;);</span><br><span class="line"><span class="comment">//[2,4,6,8]</span></span><br></pre></td></tr></table></figure></p><p>Мне кажется лишних пояснений тут не надо. В данном случае польза стрелочных функций заключается в сокращении записи и упрощении чтения кода. </p><p>Если все же пояснение нужно, то <strong><em>x</em></strong> перед знаком <strong><em>=&gt;</em></strong> является аргументом анонимной функции (как во втором примере). А то, что идет после знака <strong><em>=&gt;</em></strong> это результат работы функции. То, что будет возвращено. </p><p>В примере выше функция имела лишь один аргумент. Для того, чтобы передать больше аргументов, мы должны просто объединить их в скобки:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item*<span class="number">2</span> + index);</span><br><span class="line"><span class="comment">//[2,5,8,11]</span></span><br></pre></td></tr></table></figure></p><p>До этого мы рассматривали варианты, когда мы сразу возвращали результат. Можем предположить, что нам потребовалось не просто вернуть результат, а провести какие-нибудь дополнительные действия внутри функции. Например, мы хотим вывести в консоль что-нибудь. Для этого нужно использовать фигурные скобки:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> res = item * <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>В общем, это все, что касается синтаксиса стрелочных функций. Можно рваться в бой. Но есть еще одна особенность-фича.</p><h2 id="Контекст-выполнения-в-стрелочных-функциях"><a href="#Контекст-выполнения-в-стрелочных-функциях" class="headerlink" title="Контекст выполнения в стрелочных функциях"></a>Контекст выполнения в стрелочных функциях</h2><p>И это хорошая новость, он сохраняется!!! Больше не нужно думать о принудительной привязке контекста через <strong><em>.bind()</em></strong>, <strong><em>$.proxy</em></strong>, городить огород из _this, self, that и прочего добра через замыкания. </p><p>Как оно было раньше:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.animalName = name;</span><br><span class="line">  </span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.animalName);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'Javier'</span>);</span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>Сейчас не та глава, чтобы я объяснял почему undefined. Но чтобы это работало, мы писали вот так (один из способов):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.animalName = name;</span><br><span class="line">  </span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.animalName);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'Javier'</span>);</span><br><span class="line"><span class="comment">//Javier</span></span><br></pre></td></tr></table></figure></p><p>Ну а используя стрелочные функции, как я уже упомянул выше, об этом думать не надо:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.animalName = name;</span><br><span class="line">  </span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.animalName);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'Javier'</span>);</span><br><span class="line"><span class="comment">//Javier</span></span><br></pre></td></tr></table></figure></p><p>Вот теперь, пожалуй, и правда все. Пользоваться стрелочными функциями легко, можно и нужно.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Лично я со стрелочными функциями познакомился лет так наверное 5-7 назад, когда был программистом ASP.NET и писал на C#. Затем, я решил полностью погрузиться в javascript, но стрелочные функции, скорее к счастью, пришли и сюда. Я люблю стрелочные функции и уверен вы их полюбите тоже.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="ES2015/ES6" scheme="http://makushev.com/tags/ES2015-ES6/"/>
    
      <category term="arrow functions" scheme="http://makushev.com/tags/arrow-functions/"/>
    
      <category term="стрелочные функции" scheme="http://makushev.com/tags/%D1%81%D1%82%D1%80%D0%B5%D0%BB%D0%BE%D1%87%D0%BD%D1%8B%D0%B5-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Шаблонные строки</title>
    <link href="http://makushev.com/2015/12/24/es6-template-strings/"/>
    <id>http://makushev.com/2015/12/24/es6-template-strings/</id>
    <published>2015-12-24T08:52:40.000Z</published>
    <updated>2018-03-20T03:51:34.997Z</updated>
    
    <content type="html"><![CDATA[<p>Не знаю как правильно перевести <strong><em>template strings</em></strong> на русский язык, но мне кажется термин <strong><em>шаблонные строки</em></strong> будет наиболее близок к сути. Новая фича ES2015, судя по комментам в интернете, вызвала противоположные отзывы. Кто-то в восторге и кричит “Наконец-то”, кто-то консервативно бубнит “и так было нормально. В чем бенефит?”. Ну а мы давайте разберемся в чем собственно суть?<br><a id="more"></a></p><h2 id="Backtick-обратный-штрих"><a href="#Backtick-обратный-штрих" class="headerlink" title="Backtick (обратный штрих)"></a>Backtick (обратный штрих)</h2><p>Вообще не помню, чтобы когда-либо использовал понятие “обратный штрих”. Были кавычки, были апострофы, одинарная кавычка (которая апостроф, опять же). Ну в общем и целом это и есть символ <strong><em>`</em></strong>, который лег в основу шаблонных строк в ES2015.</p><p>Раньше разработчиков можно было разделить на тех, кто обрамляет строки в апострофы (называя их одинарными кавычками), и кавычки (обычные двойные). Теперь, благодаря шаблонным строкам, две эти группы программистов могут быть объединены:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">`What's up man? This is "ES2015"!`</span>;</span><br></pre></td></tr></table></figure></p><p>Под шаблонными строками понимается строка, заключенная в обратные штрихи (backticks).</p><h2 id="Выражения"><a href="#Выражения" class="headerlink" title="Выражения"></a>Выражения</h2><p>Теперь внутрь шаблонных строк можно помещать и выражения. Для этого используется следующий синтаксис:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">`Today is <span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></p><p>Все, что находится ${здесь}, является выражением, которое будет вычисляться на этапе исполнения кода.</p><h2 id="Многострочность"><a href="#Многострочность" class="headerlink" title="Многострочность"></a>Многострочность</h2><p>Шаблонные строки дают возможность иметь в коде многострочные шаблоны. Раньше для решения задачи, когда в коде у вас была разметка, и при этом, чтобы код был читабельным, приходилось изобретать что-то вроде:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = [</span><br><span class="line">    <span class="string">'&lt;h1&gt;'</span> + <span class="string">'Title'</span> + <span class="string">'&lt;/h1&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;div&gt;'</span> + <span class="string">'Some content'</span> + <span class="string">'&lt;/div&gt;'</span></span><br><span class="line">  ];</span><br><span class="line"><span class="built_in">console</span>.log(template.join(<span class="string">'\n'</span>));</span><br></pre></td></tr></table></figure></p><p>Теперь все это стало проще:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template2 = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h1&gt;Title&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;Some content&lt;/div&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template2);</span><br></pre></td></tr></table></figure></p><p>А если вспомнить про <a href="/2015/12/21/es6-destructuring/">Деструктуризацию</a>, то и вовсе можно решать шаблонные задачи весьма элегантно:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> post = &#123;</span><br><span class="line">  title: <span class="string">'ES6 Template Strings'</span>,</span><br><span class="line">  date: <span class="built_in">Date</span>.now(),</span><br><span class="line">  tags: [</span><br><span class="line">    <span class="string">'ES6'</span>, <span class="string">'template strings'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;title, tags&#125; = post;</span><br><span class="line"><span class="keyword">var</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;h1&gt;<span class="subst">$&#123;title&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;tags.map(tag=&gt;<span class="string">`&lt;li&gt;<span class="subst">$&#123;tag&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">'\n'</span>)&#125;</span></span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure></p><p>Как видно, внутри ${} действительно выражения, и более того, они могут внутри себя содержать другие шаблонные строки, которые в свою очередь могут содержать другие выражения.</p><h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw"></a>String.raw</h2><p>Как видно из названия, статический метод <strong><em>String.raw</em></strong> нужен для получения необработанных строк внутри шаблона. Например:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`one\ntwo`</span>);</span><br><span class="line"><span class="comment">//one</span></span><br><span class="line"><span class="comment">//two</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`one\ntwo`</span>);</span><br><span class="line"><span class="comment">//one\ntwo</span></span><br></pre></td></tr></table></figure></p><p>Важно понимать, что ${выражения} внутри шаблонных строк все равно будут вычислены:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`One + two\nis <span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);</span><br><span class="line"><span class="comment">//One + two\nis 3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Не знаю как правильно перевести &lt;strong&gt;&lt;em&gt;template strings&lt;/em&gt;&lt;/strong&gt; на русский язык, но мне кажется термин &lt;strong&gt;&lt;em&gt;шаблонные строки&lt;/em&gt;&lt;/strong&gt; будет наиболее близок к сути. Новая фича ES2015, судя по комментам в интернете, вызвала противоположные отзывы. Кто-то в восторге и кричит “Наконец-то”, кто-то консервативно бубнит “и так было нормально. В чем бенефит?”. Ну а мы давайте разберемся в чем собственно суть?&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="ES2015/ES6" scheme="http://makushev.com/tags/ES2015-ES6/"/>
    
      <category term="Template strings" scheme="http://makushev.com/tags/Template-strings/"/>
    
      <category term="Шаблонные строки" scheme="http://makushev.com/tags/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Destructuring в Javascript.</title>
    <link href="http://makushev.com/2015/12/21/es6-destructuring/"/>
    <id>http://makushev.com/2015/12/21/es6-destructuring/</id>
    <published>2015-12-21T15:34:37.000Z</published>
    <updated>2018-03-20T03:51:34.996Z</updated>
    
    <content type="html"><![CDATA[<p>Деструктуризация или разбиение на элементы - новая возможность в языке Javascript (ES2015/ES6), которая позволяет извлекать данные из массивов и объектов, используя синтаксис объявления массивов и литералов объектов соответственно.<br><a id="more"></a></p><h2 id="Деструктуризация-массивов"><a href="#Деструктуризация-массивов" class="headerlink" title="Деструктуризация массивов"></a>Деструктуризация массивов</h2><p>Мне кажется начинать изучение этой темы лучше с массивов. Оно как-то нагляднее что ли выглядит, особенно, когда в первый раз начинаешь читать об этом.</p><h3 id="Объявление-переменных"><a href="#Объявление-переменных" class="headerlink" title="Объявление переменных"></a>Объявление переменных</h3><p>В следующем примере мы используем деструктуризацию для задания значения переменных из массива:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="keyword">var</span> [a,b] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>Казалось бы, ничего интересного, и даже в старом стиле вроде как нагляднее. Но использование деструктуризации позволяет нам, например, поменять местами значения переменных без использования третьей:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="keyword">var</span> [a,b] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> _ref = [b, a];</span><br><span class="line">a = _ref[<span class="number">0</span>];</span><br><span class="line">b = _ref[<span class="number">1</span>];</span><br><span class="line">_ref;</span><br></pre></td></tr></table></figure></p><h3 id="Возврат-несколько-значений"><a href="#Возврат-несколько-значений" class="headerlink" title="Возврат несколько значений"></a>Возврат несколько значений</h3><p>Функции всегда могли возвращать массивы. Но благодаря деструктуризации мы можем получить дополнительную гибкость.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAges</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">14</span>, <span class="number">15</span>, <span class="number">18</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [sasha, masha, dasha] = getAges();</span><br><span class="line"><span class="built_in">console</span>.log(sasha);</span><br><span class="line"><span class="comment">//14</span></span><br><span class="line"><span class="built_in">console</span>.log(masha);</span><br><span class="line"><span class="comment">//15</span></span><br><span class="line"><span class="built_in">console</span>.log(dasha);</span><br><span class="line"><span class="comment">//18</span></span><br></pre></td></tr></table></figure></p><p>В ES5 такой пример свелся либо к вызову функции <strong><em>getAges()</em></strong> 3 раза, либо к дополнительной переменной, которая бы хранила значение функции. </p><h3 id="Игнорирование-значений"><a href="#Игнорирование-значений" class="headerlink" title="Игнорирование значений"></a>Игнорирование значений</h3><p>Допустим, мы знаем, что предыдущая функции возвращает всегда массив из 3-х возрастов. Если нам не нужны все 3 из них, мы можем просто игнорировать ненужные значения, опуская названия переменных:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAges</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">14</span>, <span class="number">15</span>, <span class="number">18</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [sasha, , dasha] = getAges();</span><br><span class="line"><span class="built_in">console</span>.log(sasha);</span><br><span class="line"><span class="comment">//14</span></span><br><span class="line"><span class="built_in">console</span>.log(dasha);</span><br><span class="line"><span class="comment">//18</span></span><br></pre></td></tr></table></figure></p><h2 id="Деструктуризация-объектов"><a href="#Деструктуризация-объектов" class="headerlink" title="Деструктуризация объектов"></a>Деструктуризация объектов</h2><p>После того, как мы поняли суть работы с массивами, понять как работает деструктуризация с объектами труда не составит.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Vladimir'</span>, <span class="attr">lastname</span>: <span class="string">'Makushev'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, lastname&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">'Vladimir'</span>, <span class="attr">lastname</span>: <span class="string">'Makushev'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> name = person.name;</span><br><span class="line"><span class="keyword">var</span> lastname = person.lastname;</span><br></pre></td></tr></table></figure></p><p>В примере выше мы создали две новые переменные, значения которых были взяты из свойств объекта с точно таким же именем. А если мы хотим объявить новые переменные и присвоить им значения старых? Пожалуйста:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'Vladimir'</span>, <span class="attr">lastname</span>: <span class="string">'Makushev'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">name</span>: personName, <span class="attr">lastname</span>: personSurname&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">'Vladimir'</span>, <span class="attr">lastname</span>: <span class="string">'Makushev'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> personName = person.name;</span><br><span class="line"><span class="keyword">var</span> personSurname = person.lastname;</span><br></pre></td></tr></table></figure></p><h3 id="Вложенные-объекты"><a href="#Вложенные-объекты" class="headerlink" title="Вложенные объекты"></a>Вложенные объекты</h3><p>Часто бывает что у нас есть объект с опциями или метаданными, и на основе него мы хотим сформировать какой-то другой, новый объект. Давайте рассмотрим следующий пример:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  showCloseButton: <span class="literal">true</span>,</span><br><span class="line">  title: <span class="string">'Some title'</span>,</span><br><span class="line">  description: &#123;</span><br><span class="line">    isBold: <span class="literal">true</span>,</span><br><span class="line">    isItalic: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  urls: [<span class="string">'http://makushev.com'</span>, <span class="string">'http://blog.makushev.com'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">title</span>: modalTitle, <span class="attr">urls</span>: myUrls&#125; = options;</span><br><span class="line"><span class="built_in">console</span>.log(modalTitle);</span><br><span class="line"><span class="comment">//Some title</span></span><br><span class="line"><span class="built_in">console</span>.log(myUrls);</span><br><span class="line"><span class="comment">//["http://makushev.com", "http://blog.makushev.com"]</span></span><br></pre></td></tr></table></figure></p><h3 id="Объект-как-параметр-функции"><a href="#Объект-как-параметр-функции" class="headerlink" title="Объект как параметр функции"></a>Объект как параметр функции</h3><p>Да, деструктуризация будет работать и в этом случае.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES2015</span></span><br><span class="line"><span class="keyword">var</span> user = &#123; </span><br><span class="line">  id: <span class="number">32</span>, </span><br><span class="line">  displayName: <span class="string">"interist32"</span>,</span><br><span class="line">  fullName: &#123; </span><br><span class="line">      firstName: <span class="string">"Vladimir"</span>,</span><br><span class="line">      lastName: <span class="string">"Makushev"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Просто возвращает id</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params">&#123;id&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//выводит настоящее имя пользователя</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">&#123;displayName, fullName: &#123;firstName: normalName&#125;&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//здесь в качестве параметра мы используем деструктуризацию</span></span><br><span class="line">  <span class="comment">//мы оставляем displayName как есть</span></span><br><span class="line">  <span class="comment">//а user.fullName.firstName определяем как переменную normalName</span></span><br><span class="line">  <span class="keyword">return</span> displayName + <span class="string">' is '</span> + normalName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getId(user));</span><br><span class="line"><span class="comment">//32</span></span><br><span class="line"><span class="built_in">console</span>.log(getName(user));</span><br><span class="line"><span class="comment">//interist32 is Vladimir</span></span><br></pre></td></tr></table></figure></p><h2 id="Итог"><a href="#Итог" class="headerlink" title="Итог"></a>Итог</h2><p>Использование деструктуризации может помочь сократить количество строк кода и сделать его более читабельным. Безусловно, это очередной инструмент, которым нужно уметь пользоваться.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Деструктуризация или разбиение на элементы - новая возможность в языке Javascript (ES2015/ES6), которая позволяет извлекать данные из массивов и объектов, используя синтаксис объявления массивов и литералов объектов соответственно.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="ES2015/ES6" scheme="http://makushev.com/tags/ES2015-ES6/"/>
    
      <category term="Destructuring" scheme="http://makushev.com/tags/Destructuring/"/>
    
      <category term="Деструктуризация" scheme="http://makushev.com/tags/%D0%94%D0%B5%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F/"/>
    
  </entry>
  
  <entry>
    <title>GPU and Canvas bug in Google Chrome (Windows)</title>
    <link href="http://makushev.com/2015/12/02/gpu-canvas-bug-google-chrome-windows-eng/"/>
    <id>http://makushev.com/2015/12/02/gpu-canvas-bug-google-chrome-windows-eng/</id>
    <published>2015-12-02T13:16:28.000Z</published>
    <updated>2018-03-20T03:51:34.998Z</updated>
    
    <content type="html"><![CDATA[<p>Today I was working on unusual and hence interesting task. The team manager reported about strange “Aw’ Snap!” Google Chrome message on a particular page. Have to say, that page has a gallery, map and Google Street View. I couldn’t reproduce this bug on my machine, and now I’m going to describe what we did to handle this issue.<br><a id="more"></a><br>First we made a plan to reproduce this bug and get “Aw’ snap!” message. All you need to do is open the page and refresh it (or come back to this page later). That’s all, Chrome’s tab dies instantly.</p><p>We understood that bug reproduces in Windows only. I work on Mac, but as I wrote before, have <a href="/2015/05/25/ie-mac-testing/">virtual machines for any case</a>. But even on a VM this issue was not reproduces. By the way, this is a good example of Virtual Machine inability to reproduce “live” hardware machine.</p><p>I started googling the issue and everything I’ve googled is “How to enable logging” in Chrome. I wanted to understand why Chrome crashed and what happened when It said “Aw’ Snap!”. So, to enable logging I run Chrome with flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-logging --v=1</span><br></pre></td></tr></table></figure></p><p>And then, after it crashes, log <strong><em>chrome_debug.log</em></strong> file is created in UserData directory.</p><p>I did so. And started to inspect the log:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[7924:5320:1202/135210:VERBOSE1:policy_loader_win.cc(441)] Reading policy from the registry is enabled.</span><br><span class="line">[7924:5320:1202/135210:VERBOSE1:pref_proxy_config_tracker_impl.cc(216)] 03885C38: set chrome proxy config service to 00A097F8</span><br><span class="line">[7924:5320:1202/135210:VERBOSE1:pref_proxy_config_tracker_impl.cc(354)] 03885C38: Done pushing proxy to UpdateProxyConfig</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Google &apos;Pilot&apos; log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Google &apos;Aviator&apos; log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: DigiCert Log Server</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Google &apos;Rocketeer&apos; log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Certly.IO log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Izenpe log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Symantec log</span><br><span class="line">[7924:6044:1202/135210:ERROR:cache_util_win.cc(20)] Unable to move the cache: 5</span><br><span class="line">[7924:6044:1202/135210:ERROR:cache_util.cc(132)] Unable to move cache folder C:\Users\User32\AppData\Local\Google\Chrome\User Data\ShaderCache\GPUCache to C:\Users\User32\AppData\Local\Google\Chrome\User Data\ShaderCache\old_GPUCache_000</span><br><span class="line">[7924:6044:1202/135210:ERROR:cache_creator.cc(132)] Unable to create cache</span><br><span class="line">[7924:6044:1202/135210:ERROR:shader_disk_cache.cc(588)] Shader Cache Creation failed: -2</span><br></pre></td></tr></table></figure></p><p>I noticed, surely, last 4 strings. Obviously, browser for some reason couldn’t copy/move a <strong><em>GPUCache</em></strong> directory. I can’t really say that I understand how Chrome works with GPU and its cache, but talking about Windows and GPU is a popular subject last weeks.</p><p>Further, switching maps and Street View, I found that problem is Street View. I created an Issue about it on Chromium.</p><h2 id="Instead-of-outcome"><a href="#Instead-of-outcome" class="headerlink" title="Instead of outcome"></a>Instead of outcome</h2><p>I created an isolated example to reproduce this bug. <a href="http://jsfiddle.net/7jm16rq7/" target="_blank" rel="noopener">JSFiddle</a>.<br>Follow the link and after you see Street View image, refresh the page. Just to remember, you must have Windows as OS and Google Chrome (46.0.2490.86).</p><h3 id="Полезные-ссылки"><a href="#Полезные-ссылки" class="headerlink" title="Полезные ссылки"></a>Полезные ссылки</h3><p><a href="http://www.chromium.org/for-testers/enable-logging" target="_blank" rel="noopener">How to enable logging in Google Chrome</a><br><a href="https://code.google.com/p/chromium/issues/detail?id=564613" target="_blank" rel="noopener">Issue in Chromium</a></p><p><strong><em>Update</em></strong> This issue fixed in stable 47.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I was working on unusual and hence interesting task. The team manager reported about strange “Aw’ Snap!” Google Chrome message on a particular page. Have to say, that page has a gallery, map and Google Street View. I couldn’t reproduce this bug on my machine, and now I’m going to describe what we did to handle this issue.&lt;br&gt;
    
    </summary>
    
    
      <category term="English" scheme="http://makushev.com/categories/English/"/>
    
    
      <category term="google chrome" scheme="http://makushev.com/tags/google-chrome/"/>
    
      <category term="bug" scheme="http://makushev.com/tags/bug/"/>
    
      <category term="issue" scheme="http://makushev.com/tags/issue/"/>
    
      <category term="gpu" scheme="http://makushev.com/tags/gpu/"/>
    
      <category term="canvas" scheme="http://makushev.com/tags/canvas/"/>
    
      <category term="windows" scheme="http://makushev.com/tags/windows/"/>
    
      <category term="log" scheme="http://makushev.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Баг с GPU и Canvas в Google Chrome под Windows</title>
    <link href="http://makushev.com/2015/12/02/gpu-canvas-bug-google-chrome-windows/"/>
    <id>http://makushev.com/2015/12/02/gpu-canvas-bug-google-chrome-windows/</id>
    <published>2015-12-02T12:26:58.000Z</published>
    <updated>2018-03-20T03:51:34.999Z</updated>
    
    <content type="html"><![CDATA[<p>Сегодня работал над необычной и от того интересной задачей. Выяснилось, что у наших менеджеров на определенной странице постоянно возникает сообщение “Опаньки” в Google Chrome. Скажу сразу, страница эта весьма насыщенная, в том числе фотогалереей, картой и панорамой Street View. У меня никак не получалось воспроизвести данный баг, и я собираюсь рассказать о том что было сделано для того, чтобы найти и обезвредить его.<br><a id="more"></a><br>Первым делом мы выяснили как и в какой последовательности нужно было действовать, чтобы получить то самое “Опаньки”. А для этого нужно было зайти на нашу страницу, и затем обновить ее (либо вернуться на нее позже). Все, открытый таб Chrome под Windows моментально умирал. </p><p>Я сделал небольшой изолированный пример в <a href="http://jsfiddle.net/7jm16rq7/" target="_blank" rel="noopener">JSFiddle</a>. Откройте данную ссылку, и после того, как увидите изображение панорамы, обновите страницу. Напоминаю, у вас должен быть Windows и Google Chrome (46.0.2490.86).</p><p>Далее стало ясно, что проблема проявляется исключительно под Windows. Я работаю на Mac, но имею <a href="/2015/05/25/ie-mac-testing/">виртуалки на все случаи жизни</a>. Но даже на виртуалке данная проблема не проявлялась вовсе. Это, кстати, очень хороший пример того, что виртуалка не всегда может полноценно заменить реальную машину с реальным железом.</p><p>Я начал гуглить, чтобы понять сталкивался ли кто-либо с такой проблемой. Но в итоге нагуглил о том, как в Google Chrome включить режим логгирования, чтобы лучше понимать, что же конкретно происходит, когда он показывает нам “Опаньку”. Как это сделать. Нужно запустить Google Chrome с флагом:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-logging --v=1</span><br></pre></td></tr></table></figure></p><p>И затем, после падения браузера, найти в домашней директории лог <strong><em>chrome_debug.log</em></strong></p><p>Так я и поступил. Провернули это все на машине с Windows и стали исследовать лог:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[7924:5320:1202/135210:VERBOSE1:policy_loader_win.cc(441)] Reading policy from the registry is enabled.</span><br><span class="line">[7924:5320:1202/135210:VERBOSE1:pref_proxy_config_tracker_impl.cc(216)] 03885C38: set chrome proxy config service to 00A097F8</span><br><span class="line">[7924:5320:1202/135210:VERBOSE1:pref_proxy_config_tracker_impl.cc(354)] 03885C38: Done pushing proxy to UpdateProxyConfig</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Google &apos;Pilot&apos; log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Google &apos;Aviator&apos; log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: DigiCert Log Server</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Google &apos;Rocketeer&apos; log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Certly.IO log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Izenpe log</span><br><span class="line">[7924:6044:1202/135210:VERBOSE1:multi_log_ct_verifier.cc(67)] Adding CT log: Symantec log</span><br><span class="line">[7924:6044:1202/135210:ERROR:cache_util_win.cc(20)] Unable to move the cache: 5</span><br><span class="line">[7924:6044:1202/135210:ERROR:cache_util.cc(132)] Unable to move cache folder C:\Users\User32\AppData\Local\Google\Chrome\User Data\ShaderCache\GPUCache to C:\Users\User32\AppData\Local\Google\Chrome\User Data\ShaderCache\old_GPUCache_000</span><br><span class="line">[7924:6044:1202/135210:ERROR:cache_creator.cc(132)] Unable to create cache</span><br><span class="line">[7924:6044:1202/135210:ERROR:shader_disk_cache.cc(588)] Shader Cache Creation failed: -2</span><br></pre></td></tr></table></figure></p><p>Мое внимание привлекли, конечно же, последние 4 строчки. Видно, что по каким-то неведомым причинам браузер не смог скопировать директорию GPUCache. Не могу сказать, что точно знаю как Chrome работает с GPU и с его кешем, но что-то последнее время сочетание Windows и GPU начало набивать аскомину.</p><p>Дальше попеременным отключением карты и панорамы удалось установить, что причина была именно в Street View. Создал по этому поводу создал Issue в Chromium.</p><h2 id="Вместо-итога"><a href="#Вместо-итога" class="headerlink" title="Вместо итога"></a>Вместо итога</h2><p>Целью написания данного миниисследование является показать сообществу, что такой баг существует, и, возможно, сэкономить время. Решить проблему в моем случае можно было бы перебором отключения компонентов, но хотелось понять в чем конкретно проблема. И исследуя ее, удалось заодно узнать много нового. </p><p>Если у вас данная проблема воспроизводится, то, пожалуйста, присоединяйтесь и оставляйте свои комменты на ISSUE трекере.</p><h3 id="Полезные-ссылки"><a href="#Полезные-ссылки" class="headerlink" title="Полезные ссылки"></a>Полезные ссылки</h3><p><a href="http://www.chromium.org/for-testers/enable-logging" target="_blank" rel="noopener">Как включить логгирование в Google Chrome</a><br><a href="https://code.google.com/p/chromium/issues/detail?id=564613" target="_blank" rel="noopener">Issue на эту тему в Chromium</a></p><p><strong><em>UPDATE</em></strong> Проблема была исправлена с выходом версии 47.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Сегодня работал над необычной и от того интересной задачей. Выяснилось, что у наших менеджеров на определенной странице постоянно возникает сообщение “Опаньки” в Google Chrome. Скажу сразу, страница эта весьма насыщенная, в том числе фотогалереей, картой и панорамой Street View. У меня никак не получалось воспроизвести данный баг, и я собираюсь рассказать о том что было сделано для того, чтобы найти и обезвредить его.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="google chrome" scheme="http://makushev.com/tags/google-chrome/"/>
    
      <category term="bug" scheme="http://makushev.com/tags/bug/"/>
    
      <category term="issue" scheme="http://makushev.com/tags/issue/"/>
    
      <category term="gpu" scheme="http://makushev.com/tags/gpu/"/>
    
      <category term="canvas" scheme="http://makushev.com/tags/canvas/"/>
    
      <category term="windows" scheme="http://makushev.com/tags/windows/"/>
    
      <category term="log" scheme="http://makushev.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Как понимать event-driven, blocking и non-blocking I/O</title>
    <link href="http://makushev.com/2015/11/18/how-to-understand-event-driven-programming/"/>
    <id>http://makushev.com/2015/11/18/how-to-understand-event-driven-programming/</id>
    <published>2015-11-18T10:27:21.000Z</published>
    <updated>2018-03-20T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Когда <strong>Node.js</strong> только появился, появилось множество статей о том как же он хорош в мире Highload (к слову и не только в этом мире). Как же он быстро умеет обрабатывать входящие запросы. И как правило всегда все доводы сводились к тому, что <strong>Node.js</strong> использует <strong>event-driven</strong> подход. Это запомнили все, но как выяснилось понимают не все. Давайте разбираться.<br><a id="more"></a></p><h2 id="Пример-из-жизни"><a href="#Пример-из-жизни" class="headerlink" title="Пример из жизни"></a>Пример из жизни</h2><h3 id="Blocking-I-O"><a href="#Blocking-I-O" class="headerlink" title="Blocking I/O"></a>Blocking I/O</h3><p>Представим, что мы пришли в сеть общепита, где продают фастфуд. И вот кассир нам уже машет и кричит “Свободная касса”. Мы подходим и начинаем выбирать какой бургер нам съесть. Выбрали, заказали и… Ждем. Ждем, пока наш заказ будет готов. Ждем как после этого кассир возьмет у нас деньги, выбьет чек и отдаст нам заказ. И все это время кассир тоже ждет. То есть, говоря техническим языком, он принял наш запрос, и пока что-то делается согласно нашему запросу, кассир <strong>заблокирован</strong> нами (blocking). А тут уже и народу поднабежало. И выстроилась целая очередь на обслуживание. А кассир один. И как следствие: чтобы увеличить количество обрабатываемых заказов - нужно увеличить количество кассиров. А это, как следствие, повышенная стоимость на обслуживание. Такая система становится дороже.</p><h3 id="Non-blocking-I-O-и-event-driven-подход"><a href="#Non-blocking-I-O-и-event-driven-подход" class="headerlink" title="Non-blocking I/O и event-driven подход"></a>Non-blocking I/O и <strong>event-driven</strong> подход</h3><p>А теперь представим, что мы пришли все туда же. Кассир принял наш заказ, принял деньги и выдал нам чек с неким номером, который мы должны отслеживать на мониторе. Дальше он <em>передает заказ куда-то дальше</em>, где заказ будет готовиться и собираться, и при этом он готов обслуживать следующего клиента. То есть, здесь налицо <strong>отсутствие блокировки</strong> кассира (non-blocking I/O). И вот наш заказ готов, на экране появляется его номер, это своего рода событие, которое говорит о том, что заказ готов к выдаче, кассир берет его и отдает нам. Это и называется <strong>event-driven</strong> подходом.</p><h2 id="Технически"><a href="#Технически" class="headerlink" title="Технически"></a>Технически</h2><p>Под I/O подразумеваются операции ввода/вывода, такие как чтение данных из файловой системы, или, например, БД. Обычно есть синхронный и асинхронный методы, для работы с такими ресурсами. Синхронные операции являются блокирующими, потому как требуют какой-то промежуток времени для их завершения, а обрабатывающий их поток - ждет пока они завершат свою работу. </p><p>Классический режим работы веб-сервера использует <strong>thread-based</strong> подход, то есть четко как в нашем первом примере. На каждый запрос создается отдельный поток, который продолжает жить, пока не выполнится. Сколько будет запросов - столько потоков и будет создано. И это вроде бы не проблема, если запросов немного, а если это Highload-проект, где количество запросов может быть огромным, то проблема становится весомой.</p><p>Представим в виде псевдокода thread-base подход с blocking I/O:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = getUserByName(<span class="string">'vladimir'</span>);</span><br><span class="line"><span class="comment">//waiting ...</span></span><br><span class="line">response.json(user);</span><br></pre></td></tr></table></figure></p><p>Как видно из примера выше, наш код синхронный. То есть выполняется линейно: строчка, где мы отдаем пользователя в формате JSON гарантировано всегда наступит после того, как мы получим пользователя. И вот этот промежуток времени между этими операциями будет простоем. Мощный сервер будет простаивать и просто ждать, вместо того, чтобы заниматься чем-то полезным в это время.</p><p>А теперь посмотрим на <strong>event-driven</strong> подход:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'vladimir'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">response.json(user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Как видно из этого примера, мы использовали асинхронный подход. Мы как бы сказали серверу: “Получи данные пользователя <strong>vladimir</strong>“. А потом добавили: “Когда получишь - отдай их”. Здесь нужно понять разницу в этих двух подходах. В итоге сервер как тот кассир, принял заказ и пока не будет события о том, что он получил данные пользователя, он может заниматься другими вещами, например обрабатывать другой запрос другого клиента.</p><h2 id="Примеры-вокруг"><a href="#Примеры-вокруг" class="headerlink" title="Примеры вокруг"></a>Примеры вокруг</h2><p>Я часто говорю о том, что все эти примеры окружают нас каждый день. Действительно, мы ведем себя всегда как <strong>event-driven</strong> механизм. Мы идем есть тогда, когда возникает событие о голоде. Да, пожалуй, это касается всех базовых инстинктов.</p><p>Говоря о <strong>блокировке</strong> предлагаю подумать о том, как мы готовим (варим суп). Если бы мы все делали строго последовательно (синхронно), то мы блокировали бы себя только одной операцией. И пока, например, вода не нагреется (хотя от нас этот процесс не зависит), мы не переходим к подготовке других ингредиентов. В общем и целом, было бы все дольше и крайне неэффективно.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Когда &lt;strong&gt;Node.js&lt;/strong&gt; только появился, появилось множество статей о том как же он хорош в мире Highload (к слову и не только в этом мире). Как же он быстро умеет обрабатывать входящие запросы. И как правило всегда все доводы сводились к тому, что &lt;strong&gt;Node.js&lt;/strong&gt; использует &lt;strong&gt;event-driven&lt;/strong&gt; подход. Это запомнили все, но как выяснилось понимают не все. Давайте разбираться.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="node.js" scheme="http://makushev.com/tags/node-js/"/>
    
      <category term="event-driven" scheme="http://makushev.com/tags/event-driven/"/>
    
      <category term="javascript" scheme="http://makushev.com/tags/javascript/"/>
    
      <category term="blocking I/O" scheme="http://makushev.com/tags/blocking-I-O/"/>
    
      <category term="non-blocking I/O" scheme="http://makushev.com/tags/non-blocking-I-O/"/>
    
  </entry>
  
  <entry>
    <title>Как искать дешевые авиабилеты</title>
    <link href="http://makushev.com/2015/11/15/how-to-find-cheap-flights/"/>
    <id>http://makushev.com/2015/11/15/how-to-find-cheap-flights/</id>
    <published>2015-11-15T10:02:41.000Z</published>
    <updated>2018-03-20T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Разбирал почтовый ящик и закладки, которые сделал в течение последнего месяца и наткнулся на отличное исследования от <a href="http://www.momondo.ru/" target="_blank" rel="noopener">momondo</a> на тему авиабилетов.<br><a id="more"></a></p><h2 id="Когда-лучше-покупать-билет"><a href="#Когда-лучше-покупать-билет" class="headerlink" title="Когда лучше покупать билет?"></a>Когда лучше покупать билет?</h2><ul><li>Дешевле всего покупать билет за 53 дня.</li><li>Дороже всего в день вылета.</li></ul><p>Экономия 26%</p><h2 id="В-какой-день-лучше-летать"><a href="#В-какой-день-лучше-летать" class="headerlink" title="В какой день лучше летать?"></a>В какой день лучше летать?</h2><ul><li>Дешевле всего во вторник</li><li>Дороже всего в субботу</li></ul><p>Экономия 12%</p><h2 id="В-какое-время-лучше-лететь"><a href="#В-какое-время-лучше-лететь" class="headerlink" title="В какое время лучше лететь?"></a>В какое время лучше лететь?</h2><ul><li>Дешевле всего вечером</li><li>Дороже всего днем</li></ul><p>Экономия 6%</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Разбирал почтовый ящик и закладки, которые сделал в течение последнего месяца и наткнулся на отличное исследования от &lt;a href=&quot;http://www.momondo.ru/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;momondo&lt;/a&gt; на тему авиабилетов.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="авиабилеты" scheme="http://makushev.com/tags/%D0%B0%D0%B2%D0%B8%D0%B0%D0%B1%D0%B8%D0%BB%D0%B5%D1%82%D1%8B/"/>
    
      <category term="экономия" scheme="http://makushev.com/tags/%D1%8D%D0%BA%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D1%8F/"/>
    
      <category term="momondo" scheme="http://makushev.com/tags/momondo/"/>
    
      <category term="исследование" scheme="http://makushev.com/tags/%D0%B8%D1%81%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"/>
    
  </entry>
  
  <entry>
    <title>Книга &quot;Сила воли. Как развить и укрепить&quot;</title>
    <link href="http://makushev.com/2015/09/07/book-willpower-by-kelly-mcgonigal/"/>
    <id>http://makushev.com/2015/09/07/book-willpower-by-kelly-mcgonigal/</id>
    <published>2015-09-07T09:16:32.000Z</published>
    <updated>2018-03-20T03:51:34.993Z</updated>
    
    <content type="html"><![CDATA[<p>Закончил чтение книги Келли Макгонигал <a href="http://www.litres.ru/kelli-makgonigal/sila-voli-kak-razvit-i-ukrepit-3/" target="_blank" rel="noopener">Сила воли. Как развить и укрепить</a>. Ниже приведу свои мысли по этому поводу.<br><a id="more"></a><br>На самом деле, я прочел не всю книгу, а лишь ознакомительный фрагмент длинною в 3 главы. После этого я посмотрел на полную версию книги, прочел оглавление и долго рассуждал стоит ли покупать полную версию. Купил.</p><p>В книге понравился стиль передачи информации. Автор легко и непринужденно, с шутками и прибаутками вводит нас в курс дела. Но, что важно, в книге очень много научной информации, примеров и экспериментов, которые, благодаря такой легкой подаче автора, “впитываются” очень просто и доходчиво.</p><p>Я не очень люблю книги по саморазвитию за то, что в них очень много излагается теории и обоснований тому или иному человеческому качеству, а решения как такового не предлагается. Так вот в этой книге все не так. Мне очень понравились “заключения” в конце каждой главы, где читателю предлагается провести эксперимент над собой в течение недели. Я действительно проводил все эксперименты, и более того, считаю что как раз эту книгу нужно читать по следующей схеме: прочитал главу - неделю проводи эксперимент, а затем переходи к следующей главе. Это очень полезно, потому что каждая последующая глава является продолжением предыдущей. </p><p>Именно исходя из этой схемы я решил купить-таки книгу. Я считаю, что подобного рода методики нужно применять не спеша, и по сути я расцениваю эту книгу как руководство по действиям на несколько месяцев вперед.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Закончил чтение книги Келли Макгонигал &lt;a href=&quot;http://www.litres.ru/kelli-makgonigal/sila-voli-kak-razvit-i-ukrepit-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Сила воли. Как развить и укрепить&lt;/a&gt;. Ниже приведу свои мысли по этому поводу.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="сила воли" scheme="http://makushev.com/tags/%D1%81%D0%B8%D0%BB%D0%B0-%D0%B2%D0%BE%D0%BB%D0%B8/"/>
    
      <category term="литература" scheme="http://makushev.com/tags/%D0%BB%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D0%B0/"/>
    
      <category term="саморазвитие" scheme="http://makushev.com/tags/%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B0%D0%B7%D0%B2%D0%B8%D1%82%D0%B8%D0%B5/"/>
    
  </entry>
  
  <entry>
    <title>Наследование в Javascript</title>
    <link href="http://makushev.com/2015/08/29/javascript-inheritance/"/>
    <id>http://makushev.com/2015/08/29/javascript-inheritance/</id>
    <published>2015-08-29T10:24:42.000Z</published>
    <updated>2018-03-20T03:51:35.002Z</updated>
    
    <content type="html"><![CDATA[<p>В данной статье мы будем разбираться в наследовании в Javascript. Мы должны понять что такое prototype, __proto__, Object.create, constructor.<br><a id="more"></a></p><h2 id="Классификация"><a href="#Классификация" class="headerlink" title="Классификация"></a>Классификация</h2><p>Прежде чем говорить о деталях реализации наследования, хорошо бы понимать что это и зачем оно нужно. Главное назначение наследования - это избежание повторения кода (DRY - Do not Repeat Yourself). Оно помогает вынести повторяющееся поведение объектов в одно общее место (родителя) и затем в дочерних объектах использовать его. Делается это при помощи создания <strong>Классов</strong> - обобщенных сведений о группе объектов.</p><p>Поскольку тема наследования так или иначе связана с биологией, то и в качестве примера мы будем рассматривать животных. </p><p><strong>Кролик</strong>. Что мы знаем о нем? У него точно есть глаза, он точно умеет есть. При передвижении он прыгает.<br><strong>Тигр</strong>. У него точно есть глаза, он умеет есть, но при передвижении он бегает.</p><p>Даже на этих двух примерах мы уже понимаем, что у <strong>Тигра</strong> и <strong>Кролика</strong> есть что-то общее. Соответственно, чтобы не повторяться, мы можем вынести их “общее” в класс под названием <strong>Животное</strong>. </p><p>Соответственно, наш пример можно оптимизировать с точки зрения концепции DRY:<br><strong>Животное</strong>. Имеет глаза, умеет есть.<br><strong>Кролик</strong>. Животное. Умеет прыгать.<br><strong>Тигр</strong>. Животное. Умеет бегать.</p><p>Оптимизация на лицо. Таким образом, можно продолжить ряд, и создать еще несколько классов: Хищные, Травоядные. Их можно разделить на парнокопытные и т.д.</p><h2 id="Свойство-proto"><a href="#Свойство-proto" class="headerlink" title="Свойство __proto__"></a>Свойство __proto__</h2><p>Свойство <strong>__proto__</strong> позволяет задать одному объекту в качестве прототипа другой объект. Вообще по своей сути свойство <strong>__proto__</strong> - это просто ссылка на объект-прототип. Когда мы обращаемся к свойству какого-либо объекта, оно будет искаться внутри этого объекта. И если вдруг его там нет, то поиск его продолжится как раз в объекте-прототипе. Это можно использовать для организации наследования свойств.</p><p>Продолжим пример из первой части. И теперь перенесем полученный результат на javascript.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//объект, описывающий животных в целом</span></span><br><span class="line"><span class="keyword">var</span> Animal = &#123;</span><br><span class="line">    hasEyes: <span class="literal">true</span>,</span><br><span class="line">    eats: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Rabbit = &#123;</span><br><span class="line">    <span class="comment">//указываем в качестве прототипа - объект Животное</span></span><br><span class="line">    __proto__: Animal,</span><br><span class="line">    jumps: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tiger = &#123;</span><br><span class="line">    __proto__: Animal,</span><br><span class="line">    <span class="comment">//указываем в качестве прототипа - объект Животное</span></span><br><span class="line">    walks: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tiger.hasEyes);</span><br><span class="line"><span class="built_in">console</span>.log(Rabbit.eats);</span><br><span class="line"><span class="built_in">console</span>.log(Tiger.jumps);</span><br></pre></td></tr></table></figure></p><p>Можно посмотреть этот пример в <a href="http://jsfiddle.net/ynsuh04f/" target="_blank" rel="noopener">JSFiddle</a>.</p><p>Если мы захотим добавить новое свойство ко всем животным, мы добавим его в объект Animal. И автоматически, благодаря прототипному наследованию, эти свойства станут доступны и <strong>Rabbit</strong> и <strong>Tiger</strong>. При этом мы видим, что ничто не мешает каждому из них иметь собственные свойства.</p><p>Можно выстраивать целый ряд цепочек прототипов, описывая наследование глубже и глубже. </p><p>Когда мы создаем объект, то его прототипом неявно является Object. И лишь у него свойство <strong>__proto__</strong> будет равно null.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__);</span><br></pre></td></tr></table></figure></p><p>Важно отметить, что свойство <strong>__proto__</strong> доступно во всех браузерах, кроме IE10 и ниже. Поэтому, если в проекте над которым вы работаете, важна поддержка браузера IE10 и ниже, данный способ вам доступен не будет.</p><h2 id="Object-create-null"><a href="#Object-create-null" class="headerlink" title="Object.create(null)"></a>Object.create(null)</h2><p>Данный метод позволяет создавать объекты на основе других объектов. Грубо говоря, делает он тоже самое, что делали мы в примере выше. Разница лишь в том, что мы указывали <strong>__proto__</strong> вручную. Для той же самой задачи мы могли бы использовать и Object.create.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animal = &#123;</span><br><span class="line">    hasEyes: <span class="literal">true</span>,</span><br><span class="line">    eats: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Rabbit = <span class="built_in">Object</span>.create(Animal);</span><br><span class="line">Rabbit.jumps = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tiger = <span class="built_in">Object</span>.create(Animal);</span><br><span class="line">Tiger.walks = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tiger.hasEyes);</span><br><span class="line"><span class="built_in">console</span>.log(Rabbit.eats);</span><br><span class="line"><span class="built_in">console</span>.log(Tiger.jumps);</span><br></pre></td></tr></table></figure><p>Результат будет тем же, что и предыдущий пример. Если мы захотим вывести все свойства объекта, то мы можем воспользоваться конструкцией<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Rabbit)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(prop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>В этом случае в консоль будут выведены свойства объекта Rabbit и свойства объекта Animal. Если мы хотим вывести только <strong>собственные</strong> свойства объекта, мы должны использовать метод <strong>.hasOwnProperty</strong>. Кстати, попробуйте догадаться откуда взялся этот метод у Rabbit, ведь мы его туда не добавляли.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Rabbit)&#123;</span><br><span class="line"><span class="keyword">if</span>(Rabbit.hasOwnProperty(prop))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(prop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Созданные таким способом объекты всегда будут иметь в качестве последнего (самого верхнего) прототипа - <strong>Object</strong>. Да, именно там хранятся методы <strong>toString</strong>, <strong>hasOwnProperty</strong> и т.д.</p><p>Однако, <strong>Object.create</strong> позволяет создавать объекты и без прототипа вовсе. Например, это может быть полезно для различных хранилищ в виде коллекций. Для этого достаточно передать в качестве аргумента <strong>null</strong>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ === <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Ну и помимо прочего <strong>Object.create</strong> может помогать задавать различные дескрипторы свойств. На них сейчас я останавливаться не буду.</p><p>Важно знать, что <strong>Object.create</strong> поддерживается не всеми браузерами (IE9+, FF4+, Safari 5+, Chrome 5+, Opera 11.60+).</p><h2 id="Свойство-prototype"><a href="#Свойство-prototype" class="headerlink" title="Свойство prototype"></a>Свойство <strong>prototype</strong></h2><p>До этого мы рассматривали примеры создания объектов с использованием {}. На реальных проектах, обычно, используют подход с созданием объекта через функцию-конструктор с использованием оператора <strong>new</strong>. Возникает вопрос: как же в этом случае указать объект-прототип?</p><p>Первое что приходит в голову:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animal = &#123;</span><br><span class="line">    hasEyes: <span class="literal">true</span>,</span><br><span class="line">    eats: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//описываем функцию-конструктор</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//устаналиваем прототип</span></span><br><span class="line"><span class="keyword">this</span>.__proto__ = Animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//создаем кролика через new</span></span><br><span class="line"><span class="keyword">var</span> rabbit = <span class="keyword">new</span> Rabbit();</span><br><span class="line"><span class="built_in">console</span>.log(rabbit.hasEyes); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>Очевидное решение оказалось рабочим. Однако, мы говорили о том, что свойство <strong>__proto__</strong> не поддерживается браузерами IE10 и ниже. </p><p>Когда мы описываем функцию-конструктор, то визуально она ничем не отличается от обычной функции. Все, что делает ее конструктором это оператор <strong>new</strong> с которым она вызывается при создании объекта. А что делает <strong>new</strong>?</p><p>Оператор <strong>new</strong> говорит интепретатору: “При создании нового объекта, установи ему в качестве <strong>__proto__</strong> то, что у функции-конструктора находится в свойстве <strong>prototype</strong>“.</p><p>Окей, стало быть нам нужно сделать вот так:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animal = &#123;</span><br><span class="line">    hasEyes: <span class="literal">true</span>,</span><br><span class="line">    eats: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//описываем функцию-конструктор</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//меняем свойство у функции-конструктора</span></span><br><span class="line">Rabbit.prototype = Animal;</span><br><span class="line"></span><br><span class="line"><span class="comment">//создаем кролика через new</span></span><br><span class="line"><span class="keyword">var</span> rabbit = <span class="keyword">new</span> Rabbit();</span><br><span class="line"><span class="built_in">console</span>.log(rabbit.hasEyes); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>Таким образом, когда мы поменяли свойство <strong>prototype</strong> и вызвали функции конструктор с оператором <strong>new</strong>, мы как бы сказали интерпретатору: “При создании нового объекта, установи ему в качестве <strong>__proto__</strong> объект <strong>Animal</strong>.</p><h2 id="Свойство-constructor"><a href="#Свойство-constructor" class="headerlink" title="Свойство constructor"></a>Свойство constructor</h2><p>Выше я упомянул, что при вызове функции с <strong>new</strong> будет создан объект, в <strong>__proto__</strong> которого будет помещено то, что у функции-конструктора находится в свойстве <strong>prototype</strong>. Но я не сказал ЧТО находится в этом самом свойстве по умолчанию. Пришло время.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">Rabbit.prototype = &#123;</span><br><span class="line"><span class="keyword">constructor</span>: Rabbit</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Здесь я руками задал прототип, который по умолчанию генерируется автоматически. </p><p>Любая функция имеет свойство <strong>prototype</strong>, в котором находится объект. У этого объекта есть свойство <strong>constructor</strong>, которое указывает на саму функцию. Сам javascript никак не использует это свойство. Но оно может быть полезно в случаях, когда мы получили объект откуда-то из вне (например, из фабрики классов). И нам нужно создать точно такой же объект. Тогда-то нам и может пригодиться это свойство:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rabbit = AnimalFactory.get(<span class="string">'rabbit'</span>);</span><br><span class="line"><span class="keyword">var</span> anotherRabbit = <span class="keyword">new</span> rabbit.constructor();</span><br></pre></td></tr></table></figure><p>Еще одним важным моментом является то, что перезаписывание свойства <strong>prototype</strong> может привести к потере свойства <strong>constructor</strong> по невнимательности. Например:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Rabbit.prototype = &#123;</span><br><span class="line">jumps: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>В примере выше мы заменили <strong>prototype</strong> по-умолчанию, на свой объект. И конечно же, забыл указать свойство <strong>constructor</strong>. Во избежание подобных недоразумений, принято не заменять, а дополнять свойство <strong>prototype</strong>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Rabbit.prototype.jumps = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><h2 id="Кроссбраузерное-наследование"><a href="#Кроссбраузерное-наследование" class="headerlink" title="Кроссбраузерное наследование"></a>Кроссбраузерное наследование</h2><p>Теперь полученных знаний должно быть достаточно для того, чтобы написать универсальную функцию, которая будет делать все то, о чем мы говорили выше.</p><h3 id="Эмуляция-Object-create"><a href="#Эмуляция-Object-create" class="headerlink" title="Эмуляция Object.create"></a>Эмуляция Object.create</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Parent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//создаем временную функцию</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//указываем в качестве прототипа - родителя</span></span><br><span class="line">    F.prototype = Parent;</span><br><span class="line">    <span class="comment">//создаем объект с указанным прототипом</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Animal = &#123;</span><br><span class="line">    hasEyes: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Rabbit = inherits(Animal);</span><br><span class="line">Rabbit.jumps = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Rabbit.jumps);</span><br><span class="line"><span class="built_in">console</span>.log(Rabbit.hasEyes);</span><br></pre></td></tr></table></figure><p>Такой подход будет работать везде. Можно сказать, что это своего рода полифилл для Object.create, но за тем лишь исключением, что здесь не будет возможности задавать дескрипторы свойств.</p><h3 id="Наследование-на-уровне-“классов”"><a href="#Наследование-на-уровне-“классов”" class="headerlink" title="Наследование на уровне “классов”"></a>Наследование на уровне “классов”</h3><p>В примере выше мы манипулировали объектами. Но как я уже упоминал, зачастую в проектах используют другой подход в описании классов. </p><p>Ну что ж, вызов принят:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.constructor = Child;</span><br><span class="line">    &#125;</span><br><span class="line">    F.prototype = Parent.prototype;</span><br><span class="line">    F.prototype._super = Parent.prototype.constructor;</span><br><span class="line">    Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hasEyes = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//вызываем конструктор родителя</span></span><br><span class="line">    <span class="keyword">this</span>._super();</span><br><span class="line">    <span class="comment">//дальше определяем собственные свойства</span></span><br><span class="line">    <span class="keyword">this</span>.jumps = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//наследуемся</span></span><br><span class="line">inherits(Rabbit, Animal);</span><br><span class="line"></span><br><span class="line"><span class="comment">//создаем кролика</span></span><br><span class="line"><span class="keyword">var</span> rabbit = <span class="keyword">new</span> Rabbit();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rabbit.jumps);</span><br><span class="line"><span class="built_in">console</span>.log(rabbit.hasEyes);</span><br></pre></td></tr></table></figure></p><p>Этот пример в <a href="http://jsfiddle.net/vusxnh2e/" target="_blank" rel="noopener">JSFiddle</a>.</p><p>Как мы видим, в функции <strong>inherits</strong> мы снова создаем временную функцию. Правда на этот раз, в качестве свойства <strong>prototype</strong> мы выставляем свойство <strong>prototype</strong> родительского класса. Это происходит, потому что на данный момент объекта, который мы могли бы туда подставить у нас нет. Да и вообще как показывает пример дальше, объекта <strong>Animal</strong> у нас даже и не создается. Соответственно понимаем, что когда функци <strong>F()</strong> будет вызвана с оператором <strong>new</strong>, то в <strong>__proto__</strong> будет помещен объект из свойства <strong>prototype</strong> класса <strong>Animal</strong>. А состоит он, как мы говорили выше, из свойства <strong>constructor</strong>, которое будет указывать на саму функцию <strong>Animal</strong>. </p><p>Дальше в качестве бонуса, мы добавляем в свойство <strong>prototype</strong> свойство <strong>_super</strong>, которое будет указывать на конструктор родителя. В дочернем классе мы должны обязательно его вызвать. Поскольку вызван он будет в контексте дочернего объекта, то и все свойства (<strong>this</strong>) будут записаны в дочерний объект.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;В данной статье мы будем разбираться в наследовании в Javascript. Мы должны понять что такое prototype, __proto__, Object.create, constructor.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="Паттерны" scheme="http://makushev.com/tags/%D0%9F%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B/"/>
    
      <category term="Наследование" scheme="http://makushev.com/tags/%D0%9D%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"/>
    
      <category term="prototype" scheme="http://makushev.com/tags/prototype/"/>
    
      <category term="Object.create" scheme="http://makushev.com/tags/Object-create/"/>
    
  </entry>
  
  <entry>
    <title>Паттерн Фасад</title>
    <link href="http://makushev.com/2015/08/29/facade-javascript-oop-pattern/"/>
    <id>http://makushev.com/2015/08/29/facade-javascript-oop-pattern/</id>
    <published>2015-08-29T07:39:05.000Z</published>
    <updated>2018-03-20T03:51:34.997Z</updated>
    
    <content type="html"><![CDATA[<p>Паттерн Фасад, на мой взгляд, является одним из самых простых и распространенных паттернов при разработке. Многие разработчики пользуются им и даже не подозревая, что техника, которую они используют называется Фасад.<br><a id="more"></a></p><h2 id="Паттерн-Фасад"><a href="#Паттерн-Фасад" class="headerlink" title="Паттерн Фасад"></a>Паттерн Фасад</h2><p>Фасад - структурный паттерн, назначение которого предоставить пользователю легкий и понятный интерфейс для взаимодействия с различными подсистемами. При этом Фасад взаимодействует с подсистемами, которые могут иметь сложную логику.</p><p>Примеров из жизни можно найти очень много. Например пульт от телевизора, который дает удобный интерфейс для управления всеми возможными функциями и опциями телевизора. Мало кто задумывается о том, что конкретно делает отдельная подсистема телевизора, когда мы нажимаем на кнопку. </p><p>Есть и другие примеры. Например, заявление на получение кредита. Потенциальный получатель кредита понятия не имеет какие процессы начинаются внутри банка после подачи заявления. Он общается лишь с фасадом кредитного отдела, где скорее всего симпатичная особа уверяет его, что все будет хорошо, нужно только лишь подписать заявление и подождать 10 минут. </p><p>Предлагаю для лучшего понимания и закрепления понаблюдать за всем, с чем вы взаимодействуете в течение дня. А лучше еще и представить, что было бы если бы этого Фасад-подхода не было.</p><h2 id="Масштабируемость"><a href="#Масштабируемость" class="headerlink" title="Масштабируемость"></a>Масштабируемость</h2><p>Применение паттерна Фасад дает нам гибкость при масштабируемости. Фасад, как мы помним, дает лишь интерфейс, для взаимодействия со всей системой в целом. А как работают отдельные подсистемы пользователя волновать не должно вообще. Так вот, если допустим одна из подсистем для работы с DOM использовала jQuery, вполне вероятно, что разработчик этой подсистемы решит, что пора облегчить этот модуль и перейти на Zepto или вовсе на чистый JavaScript. С точки зрения конечного пользователя фасада - ничего не изменится, ведь он и не знает ничего о том модуле, в котором программист навел порядок. </p><h2 id="Пример"><a href="#Пример" class="headerlink" title="Пример"></a>Пример</h2><p>Напишем простой пример магазина телефонов. Как у любого магазина, у нашего будет свой склад. Как только человек захочет купить какую-либо модель телефона, мы будем брать ее со склада и отдавать покупателю. Если на складе данной модели не будет, мы закажем ее у производителя, поместим на склад, а затем, забрав со склада продадим покупателю. Очевидно, что покупателю знать об этих тонкостях не нужно, поэтому для него мы создаем фасад в виде магазина, у которого будет лишь только один метод - купить.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Производитель</span></span><br><span class="line"><span class="keyword">var</span> Apple = &#123;</span><br><span class="line">    buy: <span class="function"><span class="keyword">function</span> (<span class="params">model</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._create(model);</span><br><span class="line">    &#125;,</span><br><span class="line">    _create: <span class="function"><span class="keyword">function</span> (<span class="params">model</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//сложный процесс производства модели</span></span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Склад</span></span><br><span class="line"><span class="keyword">var</span> Stock = &#123;</span><br><span class="line">    _stock: [],</span><br><span class="line">    <span class="comment">//добавление на склад</span></span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">product</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._stock.push(product);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//получение со склада</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">product</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">            stockProduct;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._stock.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (item === product) &#123;</span><br><span class="line">                stockProduct = self._stock.splice(index, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stockProduct ? stockProduct[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Магазин</span></span><br><span class="line"><span class="keyword">var</span> Shop = &#123;</span><br><span class="line">    <span class="comment">//фасад магазина - интерфейс для покупки</span></span><br><span class="line">    buy: <span class="function"><span class="keyword">function</span> (<span class="params">product</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._getFromStock(product);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//внутрений метод магазина по получению продукта</span></span><br><span class="line">    _getFromStock: <span class="function"><span class="keyword">function</span> (<span class="params">product</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> stockProduct;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stockProduct = Stock.get(product);</span><br><span class="line">        <span class="comment">//если есть на складе - отдаем</span></span><br><span class="line">        <span class="keyword">if</span> (stockProduct) &#123;</span><br><span class="line">            <span class="keyword">return</span> stockProduct;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//если нет на складе - покупаем у производителя и кладем на склад</span></span><br><span class="line">        Stock.add(Apple.buy(product));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//отдаем со склада</span></span><br><span class="line">        <span class="keyword">return</span> Stock.get(product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Добавим на склад несколько моделей</span></span><br><span class="line">Stock.add(<span class="string">'iPhone 3g'</span>);</span><br><span class="line">Stock.add(<span class="string">'iPhone 4'</span>);</span><br><span class="line">Stock.add(<span class="string">'iPhone 4s'</span>);</span><br><span class="line">Stock.add(<span class="string">'iPhone 5s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Купим модель, которая есть на складе</span></span><br><span class="line"><span class="built_in">console</span>.log(Shop.buy(<span class="string">'iPhone 3g'</span>));</span><br><span class="line"><span class="comment">//Купим модель, которой нет на складе</span></span><br><span class="line"><span class="built_in">console</span>.log(Shop.buy(<span class="string">'iPhone 6'</span>));</span><br></pre></td></tr></table></figure><p>Поиграться с примером можно традиционно в <a href="http://jsfiddle.net/q0bq6h7o/" target="_blank" rel="noopener">JSFiddle</a>. Не забудьте открыть консоль.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Паттерн Фасад, на мой взгляд, является одним из самых простых и распространенных паттернов при разработке. Многие разработчики пользуются им и даже не подозревая, что техника, которую они используют называется Фасад.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="Паттерны" scheme="http://makushev.com/tags/%D0%9F%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B/"/>
    
      <category term="Mediator" scheme="http://makushev.com/tags/Mediator/"/>
    
      <category term="Dispatcher" scheme="http://makushev.com/tags/Dispatcher/"/>
    
  </entry>
  
  <entry>
    <title>Паттерн Mediator (Dispatcher)</title>
    <link href="http://makushev.com/2015/08/04/mediator-dispatcher-oop-pattern/"/>
    <id>http://makushev.com/2015/08/04/mediator-dispatcher-oop-pattern/</id>
    <published>2015-08-04T18:06:49.000Z</published>
    <updated>2018-03-20T03:51:35.004Z</updated>
    
    <content type="html"><![CDATA[<p>Теперь настало время разобрать что же такое Mediator. Его отличие, а также преимущества относительно Observer’а я рассмотрю в отдельной сравнительной статье. Но на самом деле, мне кажется многие догадаются об этом и сами, когда появится ясность и понимание данного паттерна.<br><a id="more"></a></p><h2 id="Mediator-Dispatcher"><a href="#Mediator-Dispatcher" class="headerlink" title="Mediator, Dispatcher"></a>Mediator, Dispatcher</h2><p>Лично у меня долгое время была путаница в голове, когда я читал и разбирал различные Dispatcher’ы и Mediator’ы. Я никак не мог понять в чем их разница. Так вот на самом деле как оказалось это одно и то же, просто названо разными словами.</p><p>Медиатор/Диспетчер - это посредник, который нужен, чтобы убрать ненужные связи между различными объектами. </p><h3 id="Аналогия"><a href="#Аналогия" class="headerlink" title="Аналогия"></a>Аналогия</h3><p>Если мы взглянем на реальный мир, то больше всего мне нравится аналогия с телефонной станцией. Допустим в двух соседних домах у жильцов возникла необходимость иметь возможность общаться друг с другом по телефону. И вот они начали протягивать провода друг к другу. Вася больше всего дружит с Мишей, поэтому этот провод он протягивает в первую очередь. В принципе, он не против время от времени звонить своей подруге Гале. Тянем шнур и к ней. Ну и на всякий случай пусть будет связь с его бывшей подружкой Мариной, которая имеет привычку раз в год ему звонить и тешить его самолюбие рассказами о том, что она так и не нашла себе никого лучше Васи. И вот таким образом у Васи дома торчат три провода. Но это в лучшем случае.</p><p>У каждого жильца свои такие же предпочтения. И ладно, если жильцов не так много, а если дом многоэтажный? То провода, торчащие из окон скоро запутаются между собой, да и выйти на улицу, вероятно, станет не так просто. А как быть с обслуживанием такой системы? Как найти тот кабель, который вышел из строя?</p><p>И вот тут приходит решение. Построить диспетчерскую. Протянуть туда лишь по одному проводу от каждого жильца и поставить коммутатор, за которым любой человек будет соединять нужных абонентов. Например, Василий поднимает трубку и просит соединить его с Мишей. <strong>Диспетчер</strong> на коммутаторе соединяет двух абонентов и они общаются. Плюс туда можно посадить миловидную пенсионерку бабу Валю - работа несложная - она справится. По крайней мере до момента, пока этот процесс нельзя будет автоматизировать.</p><h3 id="Ближе-к-сути"><a href="#Ближе-к-сути" class="headerlink" title="Ближе к сути"></a>Ближе к сути</h3><p>Суть медиатора сводится к тому, что он является промежуточным звеном в любой системе. Таким образом, он позволяет избежать прямой связанности компонентов между собой. Компоненты в свою очередь связаны только с медиатором (диспетчером) и эта их единственная возможность общения с внешним миром (имеется в виду с объектами вне компонента).</p><h2 id="Реализация"><a href="#Реализация" class="headerlink" title="Реализация"></a>Реализация</h2><p>Снова я оговорюсь, что представленный ниже код - иллюстрация подхода. Потому я нарочно не захламляю его лишними методами, проверками и прочей логикой. Наша цель - понять суть.</p><h3 id="Саша-Маша-и-новости"><a href="#Саша-Маша-и-новости" class="headerlink" title="Саша, Маша и новости"></a>Саша, Маша и новости</h3><p>Если вы читали статью про паттерн <a href="/2015/08/03/observer-pub-sub-oop-pattern/">Observer</a>, то вы уже знаете наших героев. Предлагаю реализовать следующий пример.</p><p>Существует некий новостной журнал. Его задача генерировать новости и зарабатывать на этом деньги. Для этого у журнала есть инструменты для добавления новостей. Они даже наняли редактора новостей, который умеет эти новости генерировать, но он фрилансер и вообще живет в другом часовом поясе. Как быстро распространять новости, журнал пока еще не представляет. Но им повезло, есть агентство, которое умеет набирать базу подписчиков и отправлять им то, что подписчикам интересно. Ну вот юзкейс для реализации и готов. Давайте разберем кто у нас есть:</p><ul><li>Саша и Маша - <strong>подписчики</strong></li><li>Новостной журнал - хранилище новостей с инструментом для добавления новости</li><li>Редактор новостей - сторонний компонент, который добавляет новости</li><li>Агентство - <strong>диспетчер/медиатор</strong></li></ul><p>Вначале мы просим редактора заполнить базу журнала какими-нибудь шокирующими новостями. Затем запустим режим “лайв”, в котором каждые 3 секунды журнал будет публиковать по новости. Если новости закончатся - мы попросим диспетчера сообщить об этом редактору, который быстренько подсуетится и придумает новость. </p><p>Для Саши и Маши это все будет происходит “за кулисами”. Они не хотят вникать в суть всего механизма, а просто хотят читать новости. Маша про моду, Саша все остальное. Как мы видим диспетчер обо всем позаботится, и свяжет несколько компонентов в единый работающий механизм.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Опишем наш медиатор. Он будет диспетчером рассылки новостей.</span></span><br><span class="line"><span class="keyword">var</span> Dispatcher = &#123;</span><br><span class="line">    <span class="comment">//хранилище всех подписчиков</span></span><br><span class="line">    subscribers: &#123;&#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//метод для подписки на какое-либо событие</span></span><br><span class="line">    on: <span class="function"><span class="keyword">function</span> (<span class="params">event, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.subscribers.hasOwnProperty(event)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subscribers.push(handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.subscribers[event] = [handler];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//метод для вызова обработчиков на некое событие</span></span><br><span class="line">    trigger: <span class="function"><span class="keyword">function</span> (<span class="params">event, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> ev <span class="keyword">in</span> <span class="keyword">this</span>.subscribers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ev !== event) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.subscribers.hasOwnProperty(ev)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.subscribers[ev].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">                    handler(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Наш журнал, с некоторыми новостями</span></span><br><span class="line"><span class="keyword">var</span> Magazine = &#123;</span><br><span class="line">    news: [],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Метод в журнале, который просто добавляет новую новость</span></span><br><span class="line">    addNews: <span class="function"><span class="keyword">function</span>(<span class="params">category, title</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.news.push(&#123;</span><br><span class="line">            category: category,</span><br><span class="line">            title: title</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Режим "лайв". Каждые 3 секунды выпускаем новость в свет</span></span><br><span class="line">    live: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newsItem;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.news.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//если новости закончились - кричим об этом</span></span><br><span class="line">                Dispatcher.trigger(<span class="string">'No news'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newsItem = <span class="keyword">this</span>.news.splice(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//отдаем диспетчеру очередную новость</span></span><br><span class="line">            Dispatcher.trigger(newsItem.category, newsItem.title);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Саша, который всем обо всем рассказывает</span></span><br><span class="line"><span class="keyword">var</span> Sasha = &#123;</span><br><span class="line">    tellToEveryone: <span class="function"><span class="keyword">function</span> (<span class="params">anything</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I am Sasha. Did you heard that '</span> + anything + <span class="string">' ?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Маша, которая обо всем пишет в блог</span></span><br><span class="line"><span class="keyword">var</span> Masha = &#123;</span><br><span class="line">    writeToBlog: <span class="function"><span class="keyword">function</span> (<span class="params">anything</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hi, it's Masha. Just known that "</span> + anything + <span class="string">'!!! OMG!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Редактор новостей, ответственный за генерирование новостей</span></span><br><span class="line"><span class="keyword">var</span> NewsMaker = &#123;</span><br><span class="line">    generateNews: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Magazine.addNews(<span class="string">'Sport'</span>, <span class="string">'Auto news was generated #'</span> + (<span class="built_in">Math</span>.random(<span class="number">10</span>)*<span class="number">100</span>).toFixed(<span class="number">0</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    addNews: <span class="function"><span class="keyword">function</span>(<span class="params">category, title</span>)</span>&#123;</span><br><span class="line">        Magazine.addNews(category, title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Сообщаем диспетчеру о том, на что подписан каждый из наших участников</span></span><br><span class="line">Dispatcher.on(<span class="string">'Sport'</span>, Sasha.tellToEveryone);</span><br><span class="line">Dispatcher.on(<span class="string">'News'</span>, Sasha.tellToEveryone);</span><br><span class="line">Dispatcher.on(<span class="string">'Fashion'</span>, Masha.writeToBlog);</span><br><span class="line">Dispatcher.on(<span class="string">'No news'</span>, NewsMaker.generateNews);</span><br><span class="line"></span><br><span class="line"><span class="comment">//пусть редактор добавит несколько новостей сразу</span></span><br><span class="line">NewsMaker.addNews(<span class="string">'Sport'</span>,<span class="string">"Alenichev's Spartak won his first home match against Rubin Kazan"</span>);</span><br><span class="line">NewsMaker.addNews(<span class="string">'Fashion'</span>,<span class="string">'The best shop ever opened in Moscow'</span>);</span><br><span class="line">NewsMaker.addNews(<span class="string">'Sport'</span>,<span class="string">'Messi signed new Barcelona contract'</span>);</span><br><span class="line">NewsMaker.addNews(<span class="string">'News'</span>,<span class="string">'Martians have landed on Earth'</span>);</span><br><span class="line">NewsMaker.addNews(<span class="string">'Fashion'</span>,<span class="string">'Do your selfie right!'</span>);</span><br><span class="line">NewsMaker.addNews(<span class="string">'Sport'</span>,<span class="string">'Christiano Ronaldo moved to Anzhi'</span>);</span><br><span class="line">NewsMaker.addNews(<span class="string">'News'</span>,<span class="string">'Crimea is ours!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Запускаем режим "лайв"</span></span><br><span class="line">Magazine.live();</span><br></pre></td></tr></table></figure><p>Поиграться с примером можно традиционно в <a href="http://jsfiddle.net/ccuwkgp8/" target="_blank" rel="noopener">JSFiddle</a>. Не забудьте открыть консоль.</p><p>Надеюсь, статья помогла вам разобраться в том что же такое медиатор и зачем он нужен.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Теперь настало время разобрать что же такое Mediator. Его отличие, а также преимущества относительно Observer’а я рассмотрю в отдельной сравнительной статье. Но на самом деле, мне кажется многие догадаются об этом и сами, когда появится ясность и понимание данного паттерна.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="Паттерны" scheme="http://makushev.com/tags/%D0%9F%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B/"/>
    
      <category term="Mediator" scheme="http://makushev.com/tags/Mediator/"/>
    
      <category term="Dispatcher" scheme="http://makushev.com/tags/Dispatcher/"/>
    
  </entry>
  
  <entry>
    <title>Паттерн Observer и Pub/Sub</title>
    <link href="http://makushev.com/2015/08/03/observer-pub-sub-oop-pattern/"/>
    <id>http://makushev.com/2015/08/03/observer-pub-sub-oop-pattern/</id>
    <published>2015-08-03T17:42:48.000Z</published>
    <updated>2018-03-20T03:51:35.004Z</updated>
    
    <content type="html"><![CDATA[<p>Не случайно я хочу рассмотреть этот паттерн в первую очередь. Во-первых его назначение абсолютно понятно, и любой javascript-разработчик возможно даже не подозревает как часто он его использует.<br><a id="more"></a></p><h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><p>Observer, переводя на русский язык, означает “Наблюдатель”. Логично предположить, что если есть наблюдатель, то должен быть и предмет его наблюдения. Например, человек, который увлекается рыбалкой, постоянно является наблюдателем, когда смотрит на неподвижный поплавок. Естественно, целью наблюдения за поплавком является <strong>событие</strong>, которое заставит предпринять какое-либо <strong>действие</strong>.</p><p>Переводя описанное выше на технические термины, можно выделить следующие детали. Паттер “Observer” полезен, когда:</p><ul><li>Есть наблюдаемый объект (subject) - в нашем случае - поплавок;</li><li>Есть наблюдатель (object) - в нашем случае - рыбак;</li><li>Есть событие (event) - в нашем случае - поплавок дергается;</li><li>Есть действие (event handler) - в нашем случае - действие рыбака (предположим, он дергает удачку).</li></ul><p>Другими словами, использование паттерна нужно, когда 2 независимых объекта должны быть связаны между собой посредством какого-нибудь события.</p><p>Чуть выше, я говорил о том, что многие не представляют, что уже постоянно используют этот подход. Посмотрим на пример:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'button clicked'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Да, конструкция, которую знает даже школьник. Ну или продвинутый школьник. При клике на кнопку, мы хотим выводить сообщение о том, что кнопка нажата. Чувствуете аналогию с рыбаком? При подергивании поплавка - вынимай удочку.</p><ul><li>Subject в данном случае - кнопка (button);</li><li>Object - документ;</li><li>Event, очевидно, клик;</li><li>Event Handler - функция, которая будет вызвана при возникновении события.</li></ul><h2 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h2><p>По сути Pub/Sub это отдельно взятая реализация Observer. Можно сказать, подмножество или прием. Суть в нем та же самая. Есть небольшие различия в терминологии, но чтобы не забивать голову терминами, я не стану их тут приводить. Название Pub/Sub - это сокращение от Publisher/Subscriber (Издатель/Подписчик). Так на самом деле легче всего запомнить этот паттерн.</p><p>Рассмотрим пример из жизни. Существуют различные газетные издательства. Саша считает себя крайне либеральным человеком, посему любит читать новости газеты Freedom. А Маша любит читать новости из разных источников, в том числе противоположных по взгляду: газету Freedom и журнал Union. Когда Саша получает свежий номер газеты, он ходит и трубит всем вокруг о том, что прочел. Маша же формулирует свои мысли в некий блог.</p><p>Вот, пожалуй что и готовый пример для программирования.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Опишем объект "Издатель"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Publisher</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//это просто массив для хранения всех подписчиков</span></span><br><span class="line">    <span class="keyword">this</span>.subscribers = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Опишем метод, который позволит подписчикам, подписаться на издателя</span></span><br><span class="line"><span class="comment">//грубо говоря, любой желающий может пойти на почту и подписаться</span></span><br><span class="line"><span class="comment">//или как там это сейчас делается? :)</span></span><br><span class="line">Publisher.prototype.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params">onPublish</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subscribers.push(onPublish);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Опишем метод, который будет вызываться, когда издатель издал новую новость</span></span><br><span class="line">Publisher.prototype.publish = <span class="function"><span class="keyword">function</span>(<span class="params">sometext</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//пробегаем по всем подписчикам и отдаем ему текст новости</span></span><br><span class="line">    <span class="keyword">this</span>.subscribers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">subscriber</span>)</span>&#123;</span><br><span class="line">        subscriber(sometext);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ну а теперь создадим два новых издательства</span></span><br><span class="line"><span class="keyword">var</span> freedom = <span class="keyword">new</span> Publisher();</span><br><span class="line"><span class="keyword">var</span> union = <span class="keyword">new</span> Publisher();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Теперь Сашу, который всем обо всем рассказывает по каждому поводу</span></span><br><span class="line"><span class="keyword">var</span> Sasha = &#123;</span><br><span class="line">    tellToEveryone: <span class="function"><span class="keyword">function</span>(<span class="params">news</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'OMG! Did you hear that '</span> + news);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Теперь Машу, которая обо всем пишет свои мысли в блог</span></span><br><span class="line"><span class="keyword">var</span> Masha = &#123;</span><br><span class="line">    writeToBlog: <span class="function"><span class="keyword">function</span>(<span class="params">news</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'My opinions about '</span> + news);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Осуществим подписку Саши и Маши на газету Freedom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//строго говоря, мы могли бы написать вот так:</span></span><br><span class="line"><span class="comment">//freedom.subscribe(function(news)&#123;</span></span><br><span class="line"><span class="comment">//    Sasha.tellToEveryone(news);</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//но более аккуратной будет все же именно такая запись:</span></span><br><span class="line">freedom.subscribe(Sasha.tellToEveryone);</span><br><span class="line">freedom.subscribe(Masha.writeToBlog);</span><br><span class="line"><span class="comment">//а Машу подпишем еще и на журнал Union</span></span><br><span class="line">union.subscribe(Masha.writeToBlog);</span><br><span class="line"></span><br><span class="line"><span class="comment">//а теперь Издательства публикуют свои новости</span></span><br><span class="line">freedom.publish(<span class="string">'The winter is coming!'</span>);</span><br><span class="line">union.publish(<span class="string">"It's snowball time!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//В консоль будет выведено:</span></span><br><span class="line"><span class="comment">//OMG! Did you hear that The winter is coming!</span></span><br><span class="line"><span class="comment">//My opinions about The winter is coming!</span></span><br><span class="line"><span class="comment">//My opinions about It's snowball time!</span></span><br></pre></td></tr></table></figure><p>Поиграться с живым примером, можно в <a href="http://jsfiddle.net/zL29rhmL/" target="_blank" rel="noopener">JS Fiddle</a>.</p><p>Хочу добавить, что я привел очень простой пример паттерна, чтобы не захламлять код терминологией и дополнительными методами. Но, по-хорошему, у издателя должен быть реализован метод по отписке (unsubscribe) наблюдателей. И правда, что если взгляды Саши изменятся, и он решит отписаться от газеты Freedom и начать читать только журнал Union? </p><p>Предлагаю этот пример реализовать самостоятельно, в качестве домашнего задания.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Не случайно я хочу рассмотреть этот паттерн в первую очередь. Во-первых его назначение абсолютно понятно, и любой javascript-разработчик возможно даже не подозревает как часто он его использует.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="Паттерны" scheme="http://makushev.com/tags/%D0%9F%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B/"/>
    
      <category term="Observer" scheme="http://makushev.com/tags/Observer/"/>
    
      <category term="Pub/Sub" scheme="http://makushev.com/tags/Pub-Sub/"/>
    
  </entry>
  
  <entry>
    <title>ООП Паттерны в Javascript</title>
    <link href="http://makushev.com/2015/08/03/javascript-OOP-patterns/"/>
    <id>http://makushev.com/2015/08/03/javascript-OOP-patterns/</id>
    <published>2015-08-03T17:08:41.000Z</published>
    <updated>2018-03-20T03:51:35.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Введение"><a href="#Введение" class="headerlink" title="Введение"></a>Введение</h2><p>Этой статьей я хочу начать целый цикл статей о паттернах, которые широко применяются в мире разработки больших приложений. Абсолютно не важно десктопное ли это приложение, или это веб-приложение; написанно оно на .NET, PHP или вовсе на Javascript. Главное понимать, что паттерны проектирования - это своего рода обобщенные решения типичных задач, который рано или поздно возникают при росте любого приложения.</p><p>Для развития и роста разработчика как профессионала, как мне кажется, нужно как минимум понимать какие паттерны существуют и для чего. Обладание этими навыками дает преимущество, т.к. позволяет сэкономить силы и время при разработке.</p><p>Ну и, конечно, как фронтенд-разработчик примеры я буду проводить исключительно на Javascript.</p><p>Поскольку эта статья - введение, под катом будет размещаться содержание на дальнейшие статьи, чтобы заинтересованному читателю было что добавить в закладки.<br><a id="more"></a></p><h2 id="Оглавление"><a href="#Оглавление" class="headerlink" title="Оглавление"></a>Оглавление</h2><ul><li><a href="/2015/08/03/observer-pub-sub-oop-pattern">Паттерн Observer и Pub/Sub</a></li><li><a href="/2015/08/04/mediator-dispatcher-oop-pattern/">Паттерн Mediator (Dispatcher)</a></li><li><a href="/2015/08/29/facade-javascript-oop-pattern/">Паттерн Фасад (Facade)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Введение&quot;&gt;&lt;a href=&quot;#Введение&quot; class=&quot;headerlink&quot; title=&quot;Введение&quot;&gt;&lt;/a&gt;Введение&lt;/h2&gt;&lt;p&gt;Этой статьей я хочу начать целый цикл статей о паттернах, которые широко применяются в мире разработки больших приложений. Абсолютно не важно десктопное ли это приложение, или это веб-приложение; написанно оно на .NET, PHP или вовсе на Javascript. Главное понимать, что паттерны проектирования - это своего рода обобщенные решения типичных задач, который рано или поздно возникают при росте любого приложения.&lt;/p&gt;
&lt;p&gt;Для развития и роста разработчика как профессионала, как мне кажется, нужно как минимум понимать какие паттерны существуют и для чего. Обладание этими навыками дает преимущество, т.к. позволяет сэкономить силы и время при разработке.&lt;/p&gt;
&lt;p&gt;Ну и, конечно, как фронтенд-разработчик примеры я буду проводить исключительно на Javascript.&lt;/p&gt;
&lt;p&gt;Поскольку эта статья - введение, под катом будет размещаться содержание на дальнейшие статьи, чтобы заинтересованному читателю было что добавить в закладки.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="Паттерны" scheme="http://makushev.com/tags/%D0%9F%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B/"/>
    
  </entry>
  
  <entry>
    <title>Приоритеты CSS-селекторов</title>
    <link href="http://makushev.com/2015/07/28/css-selectors-specifity/"/>
    <id>http://makushev.com/2015/07/28/css-selectors-specifity/</id>
    <published>2015-07-28T16:10:54.000Z</published>
    <updated>2018-03-20T03:51:34.994Z</updated>
    
    <content type="html"><![CDATA[<p>Часто на собеседованиях на позицию фронтенд-разработчика или верстальщика любят давать задачки, где нужно определить как будет выглядеть тот или иной html-элемент, после применения сложных CSS селекторов. У опытных разработчиков, как правило, включается интуиция, основанная на собственных решениях и задачах. У начинающих и вовсе возникает ступор при виде сложных конструкций. </p><p>Ясное дело (я надеюсь), что современный подход БЭМ-методологии (или просто соглашение внутри команды) исключает подобные головоломки в реальных приложениях, но ход рассуждений потенциального кандидата в таких задачах дает возможность оценить уровень его понимания материала. </p><p>Но оказывается существует очень простой способ, запомнить который просто и самое интересное, что описан-то он <a href="http://www.w3.org/TR/css3-selectors/#specificity" target="_blank" rel="noopener">в спецификации W3C</a>. </p><p>Я постараюсь изложить суть своим языком.<br><a id="more"></a><br>Итак, по сути существует 4 шага:</p><ul><li>Посчитать количество селекторов #ID (и запомнить это число как A);</li><li>посчитать количество селекторов .класса, [атрибутов], и :псевдо-классов (и запомнить как B);</li><li>посчитать количество селекторов ТИПА и ::псевдо-элементов в селекторе (и запомнить как C);</li><li>игнорировать универсальный селектор.</li></ul><p><strong>Замечание!</strong> Нужно просто запомнить, что все, что находится внутри псевдо-класса :not(вот здесь), считается по этим же правилам, но при этом сам псевдо-класс <strong>:not()</strong> считать <strong>не нужно</strong>. Просто игнорируем его.</p><p>А теперь соединяем полученные А-B-C вместе и смотрим какое число в результате получилось. Чем больше число, тем больше его вес.</p><p>##Примеры<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*               <span class="comment">/*a=0, b=0, c=0     =&gt;  вес = 0     */</span></span><br><span class="line"><span class="selector-tag">UL</span>              <span class="comment">/*a=0, b=0, c=1     =&gt;  вес = 1     */</span></span><br><span class="line"><span class="selector-tag">UL</span> <span class="selector-tag">LI</span>           <span class="comment">/*a=0, b=0, c=2     =&gt;  вес = 2     */</span></span><br><span class="line"><span class="selector-tag">UL</span> <span class="selector-tag">OL</span>+<span class="selector-tag">LI</span>        <span class="comment">/*a=0, b=0, c=3     =&gt;  вес = 3     */</span></span><br><span class="line"><span class="selector-tag">H1</span> + *<span class="selector-attr">[REL=up]</span>  <span class="comment">/*a=0, b=1, c=1     =&gt;  вес = 11    */</span></span><br><span class="line"><span class="selector-tag">UL</span> <span class="selector-tag">OL</span> <span class="selector-tag">LI</span><span class="selector-class">.red</span>    <span class="comment">/*a=0, b=1, c=3     =&gt;  вес = 13    */</span></span><br><span class="line"><span class="selector-tag">LI</span><span class="selector-class">.red</span><span class="selector-class">.level</span>    <span class="comment">/*a=0, b=2, c=1     =&gt;  вес = 21    */</span></span><br><span class="line"><span class="selector-id">#x34y</span>           <span class="comment">/*a=1, b=0, c=0     =&gt;  вес = 100   */</span></span><br><span class="line"><span class="selector-id">#s12</span><span class="selector-pseudo">:not(FOO)</span>   <span class="comment">/*a=1, b=0, c=1     =&gt;  вес = 101   */</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Часто на собеседованиях на позицию фронтенд-разработчика или верстальщика любят давать задачки, где нужно определить как будет выглядеть тот или иной html-элемент, после применения сложных CSS селекторов. У опытных разработчиков, как правило, включается интуиция, основанная на собственных решениях и задачах. У начинающих и вовсе возникает ступор при виде сложных конструкций. &lt;/p&gt;
&lt;p&gt;Ясное дело (я надеюсь), что современный подход БЭМ-методологии (или просто соглашение внутри команды) исключает подобные головоломки в реальных приложениях, но ход рассуждений потенциального кандидата в таких задачах дает возможность оценить уровень его понимания материала. &lt;/p&gt;
&lt;p&gt;Но оказывается существует очень простой способ, запомнить который просто и самое интересное, что описан-то он &lt;a href=&quot;http://www.w3.org/TR/css3-selectors/#specificity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;в спецификации W3C&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Я постараюсь изложить суть своим языком.&lt;br&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="css" scheme="http://makushev.com/tags/css/"/>
    
      <category term="w3c" scheme="http://makushev.com/tags/w3c/"/>
    
  </entry>
  
  <entry>
    <title>Виртуалки IE под Mac</title>
    <link href="http://makushev.com/2015/05/24/ie-mac-testing/"/>
    <id>http://makushev.com/2015/05/24/ie-mac-testing/</id>
    <published>2015-05-25T05:42:46.000Z</published>
    <updated>2018-03-20T03:51:35.001Z</updated>
    
    <content type="html"><![CDATA[<p>Если вы ведете разработку своего веб-проекта под Mac, то у вас рано или поздно возникнет необходимость запуска и проверки проекта в браузерах Internet Explorer. Единственным нормальным и правильным способом является использование виртуальных машин. Этот способ лучше всякого рода эмуляторов/имитаторов (в том числе онлайн). Дело в том, что с помощью виртуальной машины вы можете полностью воссоздать экосистему, в которой работает браузер.</p><a id="more"></a><h2 id="Установка-и-настройка"><a href="#Установка-и-настройка" class="headerlink" title="Установка и настройка"></a>Установка и настройка</h2><ul><li>Скачиваем и устанавливаем <a href="http://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox</a></li><li><p>Чтобы установить виртуалки с IE7 - IE11 сразу, пишем в терминале (и идем обедать): </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/xdissent/ievms/master/ievms.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>Чтобы установить конкретную версию, например IE 11:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/xdissent/ievms/master/ievms.sh | IEVMS_VERSIONS=&quot;11&quot; bash</span><br></pre></td></tr></table></figure></li><li><p>По истечению 30 дней, в VirtualBox удалить все виртуалки и повторить операцию.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Если вы ведете разработку своего веб-проекта под Mac, то у вас рано или поздно возникнет необходимость запуска и проверки проекта в браузерах Internet Explorer. Единственным нормальным и правильным способом является использование виртуальных машин. Этот способ лучше всякого рода эмуляторов/имитаторов (в том числе онлайн). Дело в том, что с помощью виртуальной машины вы можете полностью воссоздать экосистему, в которой работает браузер.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="IE" scheme="http://makushev.com/tags/IE/"/>
    
      <category term="Mac" scheme="http://makushev.com/tags/Mac/"/>
    
      <category term="VirtualBox" scheme="http://makushev.com/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>Книга Git Pro</title>
    <link href="http://makushev.com/2015/05/24/git-pro-book/"/>
    <id>http://makushev.com/2015/05/24/git-pro-book/</id>
    <published>2015-05-24T10:09:28.000Z</published>
    <updated>2018-03-20T03:51:34.998Z</updated>
    
    <content type="html"><![CDATA[<p>Я работаю с git уже почти два года. Острой необходимости в глубоком его изучении у меня не было, однако, я решил, что мне для дальнейшего развития не хватает только поверхностных знаний, поэтому решил углубиться в изучение этой системы контроля версий, чтобы чувствовать себя уверенно в ежедневной работе.</p><a id="more"></a><p><a href="http://git-scm.com/book/en/v2" target="_blank" rel="noopener">Git Pro Book</a> - это отличное пособие для всех (для разработчиков, для администраторов). Ее можно использовать как отправную точку для изучения git, так и в роли справочника, куда всегда можно заглянуть за деталями того или иного случая. </p><p>Более того, читать ее можно бесплатно онлайн; можно скачать в популярных форматах PDF, EPUB, MOBI, HTML. Книга также переведена на несколько языков, в том числе на <a href="http://git-scm.com/book/ru" target="_blank" rel="noopener">русский</a>. Хочу сразу сказать, что онлайн-версия действительно переведена полностью, а вот те, что можно скачать - увы, лишь частично.</p><h2 id="О-книге"><a href="#О-книге" class="headerlink" title="О книге"></a>О книге</h2><p>Я ограничился чтением нескольких глав, которые мне показались обязательными.</p><h3 id="Введение"><a href="#Введение" class="headerlink" title="Введение"></a>Введение</h3><p>В этой главе автор четко и понятно, без лишних технических сложностей, рассказывает о том что такое система контроля версий и git в частности. Приведены пошаговые инструкции по установке под Windows, Linux, MacOS. Рассказано, как сделать минимальные настройки для работы.</p><h3 id="Основы-Git"><a href="#Основы-Git" class="headerlink" title="Основы Git"></a>Основы Git</h3><p>Еще одна глава, которую я считаю обязательной при изучении git. Здесь рассказано о том, как создавать репозитории; что такое коммит; как работать с историей коммитов; как отменять изменения; как работать с удаленными репозиториями. </p><h3 id="Ветвление"><a href="#Ветвление" class="headerlink" title="Ветвление"></a>Ветвление</h3><p>В этой главе автор не просто рассказывает про ветки, а призывает их активно использовать. Это, как мне кажется, первая сложность с которой сталкиваются начинающие пользователи git. Благо автор четко и понятно расписывает цель веток, то как они создаются. Упоминает и о том, что слияние происходит в три этапа, и понятно объясняет “что такое перемещение”. Вообще я часто слышал о том, что git rebase - это плохо (непонятно почему). В книге автор приводит и плюсы и минусы использования данного вида слияния веток.</p><hr><p>Остальные главы я прочел, что называется по диагонали. Чтобы просто быть в курсе того, где мне потом в случае необходимости искать эту информацию.</p><p>##Итог<br>Общее впечатление о книге - это литература из списка Must-Read для любого разработчика. Git-это очень удобный, современный и гибкий инструмент, которым владеть нужно умело. Я согласен, что для ежедневной работы достаточно знать 5-10 основных команд, но понимать общий принцип работы и знать о бОльших возможностях системы просто необходимо. Безусловно, это не книга на одноразовое прочтение, для меня это скорее справочник, посему добавляю эту книгу в свои закладки.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Я работаю с git уже почти два года. Острой необходимости в глубоком его изучении у меня не было, однако, я решил, что мне для дальнейшего развития не хватает только поверхностных знаний, поэтому решил углубиться в изучение этой системы контроля версий, чтобы чувствовать себя уверенно в ежедневной работе.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Русский" scheme="http://makushev.com/categories/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9/"/>
    
    
      <category term="литература" scheme="http://makushev.com/tags/%D0%BB%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D0%B0/"/>
    
      <category term="git" scheme="http://makushev.com/tags/git/"/>
    
      <category term="обучение" scheme="http://makushev.com/tags/%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5/"/>
    
  </entry>
  
  <entry>
    <title>Начало продолжения</title>
    <link href="http://makushev.com/2015/05/19/lets-begin/"/>
    <id>http://makushev.com/2015/05/19/lets-begin/</id>
    <published>2015-05-19T18:05:52.000Z</published>
    <updated>2018-03-20T03:51:35.003Z</updated>
    
    <content type="html"><![CDATA[<p>Это далеко не первый пост в моей жизни :) Ранее я вел блог на ЖЖ, и он был больше про мою жизнь и мои мысли на разные темы. Время идет, интересы и взгляды меняются, и я решил возобновить практику изложения мыслей в блог. </p><h2 id="А-для-кого-это-все"><a href="#А-для-кого-это-все" class="headerlink" title="А для кого это все?"></a>А для кого это все?</h2><p>Я считаю, что изложение мыслей неоходимо прежде всего самому излагающему. Это помогает структурировать свои мысли, думать о том как доносить их до потенциальных читателей. В виду специфики моей работы, я много читаю различных статей, рассуждений и обзоров на тему информационных технологий, и иногда действительно непросто все запомнить. Плюс зачастую прочитанное кажется мне слишком сложно передано. Я буду пытаться излагать популярные или интересные мне вещи своим языком, который как мне кажется будет понятен большинству начинающих программистов, верстальщиков или айтишников.</p><h2 id="Саморазвитие-и-события-жизни"><a href="#Саморазвитие-и-события-жизни" class="headerlink" title="Саморазвитие и события жизни"></a>Саморазвитие и события жизни</h2><p>Я постоянно стремлюсь к тому, чтобы не просто проживать очередной день, а как-то становиться лучше. Об этом я тоже буду писать, чтобы, возможно, для кого-то стать вдохновителем или примером для подражания, а может и компаньоном по интересам, работе или спорту.</p><h2 id="Политика"><a href="#Политика" class="headerlink" title="Политика"></a>Политика</h2><p>Постараюсь (изо всех сил) не затрагивать тему политики в своей блоге. Считаю, что эта тема способна поссорить даже самых близких друзей и разрушить самый слаженный коллектив. А таких целей я не преследую ни по жизни, ни в работе.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Это далеко не первый пост в моей жизни :) Ранее я вел блог на ЖЖ, и он был больше про мою жизнь и мои мысли на разные темы. Время идет, и
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
